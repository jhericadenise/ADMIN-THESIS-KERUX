Index: app/src/main/java/com/kerux/admin_thesis_kerux/dbutility/DBUtility.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kerux.admin_thesis_kerux.dbutility;\r\n\r\npublic interface DBUtility {\r\n\r\n    String jdbcDriverName = \"com.mysql.jdbc.Driver\";//vxcd9lOiVlb9DcyuaKAzLr5qD7AQB+5gr7zwfl1MXhY=\r\n    String jdbcUrl =\"jdbc:mysql://192.168.1.13/kerux\";//jdbc:mysql://192.168.1.1/keruxdb\r\n    String dbUserName = \"user\";//user//o9gPQILs8mlgWTtuaBMBFA==\r\n    String dbPassword = \"admin\";//admin//oCeOPEBYh4uhgDL4d2Q/8g==\r\n\r\n/*    String jdbcDriverName = \"com.mysql.jdbc.Driver\";\r\n    String jdbcUrl =\"jdbc:mysql://10.70.0.17/keruxdbupdate\";\r\n    String dbUserName = \"KeruxAdmin\";\r\n    String dbPassword = \"admin\";*/\r\n\r\n    //LIST VIEW DISPLAY\r\n    //Department\r\n    String SELECT_LIST_DEPT = \"SELECT clinic.clinicName, department.Name, department.Status from clinic \" +\r\n            \"INNER JOIN department ON clinic.Clinic_ID = department.Clinic_ID WHERE department.Status = 'Active'\";\r\n    //Doctor\r\n    String SELECT_LIST_DOC = \"select clinic.clinicName, department.Name, doctor.FirstName, doctor.LastName \" +\r\n            \"from clinic INNER JOIN doctor ON clinic.Clinic_ID = doctor.Clinic_ID \" +\r\n            \"INNER JOIN department ON department.Department_ID = doctor.Department_ID WHERE doctor.Status = 'Active'\";\r\n    //Queue Manager\r\n    String SELECT_LIST_QM = \"SELECT department.Name, queuemanager.FirstName, queuemanager.LastName from department INNER JOIN queuemanager ON department.Department_ID = queuemanager.Department_ID WHERE queuemanager.Status = 'Active'\";\r\n    //Accounts Patient\r\n    String SELECT_ACCOUNTS_LIST = \"select patient_type.Type, patient.ContactNo, patient.FirstName, patient.LastName, patient.Email from patient_type \" +\r\n            \"INNER JOIN patient ON patient_type.PatientType_ID = patient.PatientType_ID WHERE patient.Status = 'Active'\";\r\n    //Blocked Patients\r\n    String SELECT_BLOCKED_USERS = \"select FirstName, LastName, Status from patient WHERE Status = 'Blocked'\";\r\n\r\n    //Audit Log\r\n    String SELECT_AUDIT = \"SELECT Log_ID, TableName, EventType, SqlCommand, OldData, NewData, LoginName, TimeStamp from audit_log\";\r\n\r\n    //For Logging in\r\n    String SELECT_ADMIN_LOGIN = \"SELECT admin.Admin_ID, admin.FirstName, admin.LastName, admin.Email, admin_enrollment.Clinic_ID, admin.Username from admin \" +\r\n            \"INNER JOIN admin_enrollment ON admin.Admin_ID = admin_enrollment.Admin_ID WHERE admin.Username =? and admin.Password=?\";\r\n\r\n    //LIST VIEW DISPLAY UNENROLLED USERS\r\n    String SELECT_UNENROLLED_DEPT = \"SELECT * from department where Status =?\";\r\n    String SELECT_UNENROLLED_DOC = \"SELECT * from doctor where Status = ?\";\r\n    String SELECT_UNENROLLED_QM = \"SELECT * from queuemanager where Status = ?\";\r\n\r\n    //INSERTING RECORDS\r\n    //Doctor\r\n    String INSERT_DOCTOR = \"insert into doctor (DoctorType_ID, Clinic_ID, reasonrevoke_id, FirstName, LastName, Department_ID, \" +\r\n            \"RoomNo, Schedule1, Schedule2, Days, Status) values \" +\r\n            \"(?,?,?,?,?,?,?,?,?,?,?)\";\r\n    //Department\r\n    String INSERT_DEPT = \"insert into department (Clinic_ID, ReasonRevoke_ID, Name, Status) values (?,?,?,?)\";\r\n    //Queue Manager\r\n    String INSERT_QM = \"insert into queuemanager (Clinic_ID, Department_ID, reasonrevoke_id, Username, \" +\r\n            \"Password, FirstName, LastName, Email, Status) values (?,?,?,?,?,?,?,?,?)\";\r\n\r\n\r\n\r\n    String SELECT_NEW_DEPARTMENT_ID = \"Select MAX(department_id) from department\";\r\n    String SELECT_NEW_DOCTOR_ID = \"Select MAX(doctor_id) from doctor\";\r\n    String SELECT_NEW_QUEUEMANAGER_ID = \"Select MAX(queuemanager_id) from queuemanager\";\r\n\r\n    //INSERTING RECORDS IN ENROLLMENT\r\n    String INSERT_DEPT_ENROLLMENT = \"INSERT INTO department_enrollment (Admin_ID, Department_ID, Clinic_ID) values (?,?,?)\";\r\n    String INSERT_QM_ENROLLMENT = \"INSERT INTO qmenrollment (QueueManager_ID, Admin_ID, Department_ID, Clinic_ID) values (?,?,?,?)\";\r\n    String INSERT_DOC_ENROLLMENT = \"INSERT INTO doctor_enrollment (Admin_ID, Clinic_ID, Department_ID, Doctor_ID) values (?,?,?,?)\";\r\n\r\n    //INSERTING DATAS IN AUDIT\r\n    String INSERT_AUDIT_LOG = \"INSERT INTO audit_log (TableName, EventType, SqlCommand, OldData, NewData, LoginName)\" +\r\n            \"values (?,?,?,?,?,?)\";\r\n\r\n    //VALIDATION\r\n    String VALIDATION_DEPT = \"Select * from department where name = ? AND Status = 'Active' AND Clinic_ID = ? AND Clinic_ID = ?\";\r\n    String VALIDATION_DOCTOR = \"Select * from doctor where firstName = ? AND lastName = ? AND Status = 'Active' AND Clinic_ID = ?\";\r\n    String VALIDATION_QM = \"Select * from queuemanager where firstName = ? AND LastName = ? AND Status = 'Active' AND Clinic_ID = ?\";\r\n\r\n    //UNENROLLING RECORDS\r\n    String UNENROLL_QM = \"UPDATE queuemanager SET Status = 'Inactive' WHERE FirstName = ?\";\r\n    String UNENROLL_DOCTOR = \"UPDATE doctor SET Status = 'Inactive' WHERE FirstName = ?\";\r\n    String UNENROLL_DEPT = \"UPDATE department SET Status = 'Inactive' WHERE Name = ?\";\r\n    String BLOCK_PRIVILEGES = \"UPDATE patient SET Status = 'Blocked' WHERE FirstName = ?\";\r\n    //REASON\r\n    String UNENROLL_DOC_REASON = \"UPDATE doctor SET doctor.ReasonRevoke_ID = (SELECT reason_revoke.reasonrevoke_id \" +\r\n            \"FROM reason_revoke WHERE reason_revoke.reason=? ) WHERE doctor.FirstName = ?\";\r\n    String UNENROLL_DEPT_REASON = \"UPDATE department SET department.ReasonRevoke_ID = (SELECT reason_revoke.reasonrevoke_id \" +\r\n            \"FROM reason_revoke WHERE reason_revoke.reason=? ) WHERE department.Name = ?\";\r\n    String UNENROLL_QM_REASON = \"UPDATE queuemanager SET queuemanager.Reasonrevoke_id=(SELECT reason_revoke.reasonrevoke_id \" +\r\n            \"FROM reason_revoke WHERE reason_revoke.reason=? ) WHERE queuemanager.firstname = ?\";\r\n    String BLOCK_ACC_REASON = \"UPDATE queuemanager SET queuemanager.Reasonrevoke_id=(SELECT reason_revoke.reasonrevoke_id \" +\r\n            \"FROM reason_revoke WHERE reason_revoke.reason=? ) WHERE queuemanager.firstname = ?\";\r\n\r\n    //UPDATE ADMIN PROFILE\r\n    String UPDATE_PROFILE=\"UPDATE admin SET FirstName = ?, LastName = ?, Email = ?, Username = ?, Password = ? WHERE Admin_ID = ?\";\r\n\r\n    //sql statement for edit profile to not require the input of password when just editing basic patient information\r\n    String UPDATE_PROFILE_PASS = \"UPDATE admin SET password = ?\";\r\n\r\n    //sql statement to compare the \"old password\" the patient has inputted in the text field from the one in the database\r\n    String CONFIRM_ADMIN_PASS = \"SELECT Password FROM admin where Password = ?\";\r\n\r\n    //COUNTING RECORDS\r\n    String TOTAL_NUM_LOGIN = \"SELECT COUNT(TableName) from audit_log WHERE TableName = 'login'\";\r\n    String TOTAL_NUM_ENROLLMENT_DEPT = \"SELECT COUNT(TableName) from audit_log WHERE TableName = 'department_enrollment'\";\r\n    String TOTAL_NUM_ENROLLMENT_DOC = \"SELECT COUNT(TableName) from audit_log WHERE TableName = 'doctor_enrollment'\";\r\n    String TOTAL_NUM_ENROLLMENT_QM = \"SELECT COUNT(TableName) from audit_log WHERE TableName = 'qmenrollment'\";\r\n    String TOTAL_NUM_UNENROLL_DEPT = \"SELECT COUNT(TableName) from audit_log WHERE TableName = 'qmenrollment'\";\r\n    String TOTAL_NUM_UNENROLL_DOC = \"SELECT COUNT(TableName) from audit_log WHERE TableName = 'unenroll department'\";\r\n    String TOTAL_NUM_UNENROLL_QM = \"SELECT COUNT(TableName) from audit_log WHERE TableName = 'unenroll queue manager'\";\r\n    String SELECT_AUDIT_LIST = \"SELECT TableName, EventType, TimeStamp FROM audit_log\";\r\n\r\n    String INSERT_STAT = \"INSERT INTO statistics (QueuesServed, QueuesCancelled, HighestDocQueues, HighestDeptQueues, TimeStart, TimeEnd) SELECT \" +\r\n            \"(SELECT COUNT(ql.QueueList_ID) FROM queuelist ql INNER JOIN queue q on q.Queue_ID = ql.Queue_ID INNER JOIN queueconnector qc on qc.Queue_ID = q.Queue_ID INNER JOIN queuemanager qm on qm.QueueManager_ID = qc.QueueManager_ID WHERE qm.Clinic_ID = ? AND ql.Status='Served'), \" +\r\n            \"(SELECT COUNT(ql.QueueList_ID) FROM queuelist ql INNER JOIN queue q on q.Queue_ID = ql.Queue_ID INNER JOIN queueconnector qc on qc.Queue_ID = q.Queue_ID INNER JOIN queuemanager qm on qm.QueueManager_ID = qc.QueueManager_ID WHERE qm.Clinic_ID = ? AND ql.Status='Cancelled'), \" +\r\n            \"(SELECT CONCAT(Doctor.FirstName, Doctor.LastName) FROM DOCTOR INNER JOIN queue on queue.Doctor_ID = doctor.Doctor_ID WHERE queue.Queue_ID = (SELECT z.queueid FROM (SELECT w.Queue_ID as queueid, MAX(w.num) FROM (SELECT Queue_ID as Queue_ID, count(*) as num FROM instance GROUP BY Queue_ID) w) z)), \" +\r\n            \"(SELECT Department.Name FROM department INNER JOIN queue on queue.Department_ID = department.Department_ID WHERE queue.Queue_ID = (SELECT x.queueid FROM (SELECT y.Queue_ID as queueid, MAX(y.num) FROM (SELECT Queue_ID as Queue_ID, count(*) as num FROM instance GROUP BY Queue_ID) y) x)), CURRENT_TIME, CURRENT_TIME\";\r\n    String SELECT_STAT=\"SELECT QueuesServed, QueuesCancelled, HighestDocQueues, HighestDeptQueues from statistics ORDER BY statistics_id desc limit 1\";\r\n\r\n    //Dashboard count\r\n    String DB_DEPT = \"SELECT COUNT(Department_ID) from department WHERE Status = 'Active'\";\r\n    String DB_QM = \"SELECT COUNT(QueueManager_ID) from queuemanager WHERE Status = 'Active'\";\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/kerux/admin_thesis_kerux/dbutility/DBUtility.java	(revision bf6a5c064cca6e90a95898e48ffaca3fa388aef2)
+++ app/src/main/java/com/kerux/admin_thesis_kerux/dbutility/DBUtility.java	(date 1604851835079)
@@ -2,15 +2,15 @@
 
 public interface DBUtility {
 
-    String jdbcDriverName = "com.mysql.jdbc.Driver";//vxcd9lOiVlb9DcyuaKAzLr5qD7AQB+5gr7zwfl1MXhY=
+/*    String jdbcDriverName = "com.mysql.jdbc.Driver";//vxcd9lOiVlb9DcyuaKAzLr5qD7AQB+5gr7zwfl1MXhY=
     String jdbcUrl ="jdbc:mysql://192.168.1.13/kerux";//jdbc:mysql://192.168.1.1/keruxdb
     String dbUserName = "user";//user//o9gPQILs8mlgWTtuaBMBFA==
-    String dbPassword = "admin";//admin//oCeOPEBYh4uhgDL4d2Q/8g==
+    String dbPassword = "admin";//admin//oCeOPEBYh4uhgDL4d2Q/8g==*/
 
-/*    String jdbcDriverName = "com.mysql.jdbc.Driver";
-    String jdbcUrl ="jdbc:mysql://10.70.0.17/keruxdbupdate";
+    String jdbcDriverName = "com.mysql.jdbc.Driver";
+    String jdbcUrl ="jdbc:mysql://10.70.0.17/keruxadmin";
     String dbUserName = "KeruxAdmin";
-    String dbPassword = "admin";*/
+    String dbPassword = "admin";
 
     //LIST VIEW DISPLAY
     //Department
Index: app/src/main/java/com/kerux/admin_thesis_kerux/unenrollment/UnenrollQm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kerux.admin_thesis_kerux.unenrollment;\r\n\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.Button;\r\nimport android.widget.ListAdapter;\r\nimport android.widget.ListView;\r\nimport android.widget.SimpleAdapter;\r\nimport android.widget.Spinner;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\n\r\nimport com.kerux.admin_thesis_kerux.R;\r\nimport com.kerux.admin_thesis_kerux.dbutility.ConnectionClass;\r\nimport com.kerux.admin_thesis_kerux.dbutility.DBUtility;\r\nimport com.kerux.admin_thesis_kerux.navigation.EditProfile;\r\nimport com.kerux.admin_thesis_kerux.navigation.EnrollmentPage;\r\nimport com.kerux.admin_thesis_kerux.navigation.MainActivity;\r\nimport com.kerux.admin_thesis_kerux.navigation.ManageAccounts;\r\nimport com.kerux.admin_thesis_kerux.reports.ViewAuditReportsActivity;\r\nimport com.kerux.admin_thesis_kerux.reports.ViewStatReportsActivity;\r\nimport com.kerux.admin_thesis_kerux.security.Security;\r\nimport com.kerux.admin_thesis_kerux.session.KeruxSession;\r\nimport com.kerux.admin_thesis_kerux.spinner.Downloader;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.ResultSetMetaData;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class UnenrollQm extends AppCompatActivity implements DBUtility {\r\n\r\n    private ListView qmList;\r\n    private ListAdapter listAdapter;\r\n    Button qmDisplayList;\r\n    private Spinner spinnerQMReason;\r\n    ConnectionClass connectionClass;\r\n\r\n    DrawerLayout drawerLayout;\r\n\r\n    private static String urlReasonSpinner = \"http://192.168.1.13:89/kerux/reasonSpinnerQM.php\";\r\n    KeruxSession session;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate ( savedInstanceState );\r\n        setContentView ( R.layout.activity_unenroll_qm);\r\n        connectionClass = new ConnectionClass (); //create ConnectionClass\r\n        session=new KeruxSession(getApplicationContext());\r\n\r\n        drawerLayout = findViewById(R.id.drawer_layout);\r\n        spinnerQMReason = (Spinner) findViewById(R.id.spinnerQMReason);\r\n\r\n        qmDisplayList = (Button) findViewById(R.id.bttnDisplayQm);\r\n        qmList = (ListView) findViewById(R.id.listEnrolledQm);\r\n\r\n        qmDisplayList.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                UnenrollQm.ListQM qmListdisp = new UnenrollQm.ListQM();\r\n                qmListdisp.execute();\r\n            }\r\n        });\r\n\r\n        qmList.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n\r\n                final String selectedFromList = getQMString(String.valueOf((qmList.getItemAtPosition(position))));\r\n                Toast.makeText(getApplicationContext(), \"You selected: \" + selectedFromList, Toast.LENGTH_LONG).show();\r\n                //Dialog box, for unenrolling\r\n                AlertDialog.Builder builder = new AlertDialog.Builder(UnenrollQm.this);\r\n                builder.setMessage(\"Are you sure you want to revoke the privilege of this queue manager\" +\r\n                        \"?\")\r\n                        .setCancelable(false)\r\n                        .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\r\n                            public void onClick(DialogInterface dialog, int id) {\r\n                                String reason = ((Spinner) findViewById(R.id.spinnerQMReason)).getSelectedItem().toString();\r\n                                Toast.makeText(getApplicationContext(), selectedFromList, Toast.LENGTH_LONG).show();\r\n                                Toast.makeText(getApplicationContext(), \"Successfully revoked privilege\", Toast.LENGTH_LONG).show();\r\n                                unenrollQM(selectedFromList, reason);\r\n                                UnenrollQm.ListQM qmListdisp = new UnenrollQm.ListQM();\r\n                                qmListdisp.execute();\r\n                                insertAudit();\r\n                            }\r\n                        })\r\n                        .setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\r\n                            public void onClick(DialogInterface dialog, int id) {\r\n                                dialog.cancel();\r\n                            }\r\n                        });\r\n                AlertDialog alert = builder.create();\r\n                alert.show();\r\n            }\r\n        });\r\n\r\n        Button bttnDept = findViewById(R.id.bttnUnenrollDept);\r\n        bttnDept.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if(checkQMList()) {\r\n                    Intent intent5 = new Intent(UnenrollQm.this, UnenrollDept.class);\r\n                    startActivity(intent5);\r\n                }else{\r\n                    Toast.makeText(getApplicationContext(), \"Cannot go to Unenrollment of Department, Must UNENROLL all Queue Managers to proceed.\", Toast.LENGTH_LONG).show();\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n        Downloader qm = new Downloader(UnenrollQm.this, urlReasonSpinner, spinnerQMReason, \"Reason\", \"Choose Reason to Revoke\");\r\n        qm.execute();\r\n    }\r\n\r\n    public void ClickMenu (View view){\r\n        //open drawer\r\n        MainActivity.openDrawer(drawerLayout);\r\n    }\r\n\r\n    public void ClickLogo (View view){\r\n        //Close drawer\r\n        MainActivity.closeDrawer(drawerLayout);\r\n    }\r\n\r\n    public void ClickDashboard(View view){\r\n        //Redirect activity to dashboard\r\n        MainActivity.redirectActivity(this, MainActivity.class);\r\n    }\r\n\r\n    public void ClickEditProfile(View view){\r\n        //Redirect activity to dashboard\r\n        MainActivity.redirectActivity(this, EditProfile.class);\r\n    }\r\n\r\n    public void ClickManageAccounts(View view){\r\n        //Redirect activity to manage accounts\r\n        MainActivity.redirectActivity(this, ManageAccounts.class);\r\n    }\r\n\r\n    public void ClickEnrollment(View view){\r\n        //Recreate activity\r\n        MainActivity.redirectActivity(this, EnrollmentPage.class);\r\n    }\r\n\r\n    public void ClickRevoke(View view){\r\n        //redirect activity to revoke page\r\n        MainActivity.redirectActivity(this, UnenrollDoc.class);\r\n    }\r\n\r\n    public void ClickViewStat(View view){\r\n        MainActivity.redirectActivity(this, ViewStatReportsActivity.class);\r\n    }\r\n\r\n    public void ClickViewAudit(View view){\r\n        MainActivity.redirectActivity(this, ViewAuditReportsActivity.class);\r\n    }\r\n\r\n\r\n    public void ClickLogout(View view){\r\n        MainActivity.logout(this);\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        //close drawer\r\n        MainActivity.closeDrawer(drawerLayout);\r\n    }\r\n\r\n    public void insertAudit(){\r\n        Connection con = connectionClass.CONN();\r\n        PreparedStatement ps = null;\r\n        Security sec = new Security();\r\n\r\n        String statusActive = \"Active\";\r\n        String statusInactive = \"Inactive\";\r\n        String reason = ((Spinner)findViewById(R.id.spinnerQMReason)).getSelectedItem().toString();\r\n\r\n        try {\r\n            String queryAUDIT = INSERT_AUDIT_LOG;\r\n            PreparedStatement psAUDIT = con.prepareStatement(queryAUDIT);\r\n            psAUDIT.setString(1, sec.encrypt(\"queue manager\"));\r\n            psAUDIT.setString(2, sec.encrypt(\"unenroll queue manager\"));\r\n            psAUDIT.setString(3, sec.encrypt(\"Unenrolling a queue manager record\"));\r\n            psAUDIT.setString(4, sec.encrypt(\"Status = \" + statusActive));\r\n            psAUDIT.setString(5, sec.encrypt(\"Status = \" + statusInactive + \", \" + \"Reason = \" + reason));\r\n            psAUDIT.setString(6, session.getusername());\r\n            psAUDIT.executeUpdate();\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public void unenrollQM(String firstName, String reason){\r\n\r\n        Connection con = connectionClass.CONN();\r\n        PreparedStatement ps = null;\r\n\r\n        String query = UNENROLL_QM_REASON;\r\n        PreparedStatement ps1 = null;\r\n\r\n        try {\r\n            ps = con.prepareStatement(UNENROLL_QM);\r\n            ps.setString(1, firstName);\r\n\r\n            ps1 = con.prepareStatement(query);\r\n            ps1.setString(1, reason);\r\n            ps1.setString(2, firstName);\r\n\r\n            ps.executeUpdate();\r\n            ps1.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    //deleting a record in the database\r\n\r\n    public boolean checkQMList(){\r\n        boolean allInactiveRec = false;\r\n        Connection con = connectionClass.CONN();\r\n        String qmStatus = \"Active\";\r\n\r\n        if(con != null){ //means that we have a valid db connection\r\n            try{//inserting records; called INSERT_REC from DBUtility.java\r\n                // use of parameterized query such as PreparedStatement prevents SQL injection which is considered a way to\r\n                //prevent threat in any web app\r\n                String query = SELECT_UNENROLLED_QM;\r\n                PreparedStatement ps = con.prepareStatement(query);\r\n                ps.setString(1, qmStatus);\r\n\r\n                ResultSet rs=ps.executeQuery();\r\n                if(rs.next()){\r\n                    Log.d(\"WENT HERE\", \"DIDNT GO IN\");\r\n                }\r\n                else{\r\n                    Log.d(\"WENT HERE\", \"WENT IN\");\r\n                    allInactiveRec=true;\r\n\r\n                }\r\n            } catch(SQLException sqle){\r\n                System.err.println(sqle.getMessage());\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        return allInactiveRec;\r\n    }\r\n\r\n    //go back to the previous page\r\n    public void goBack() {\r\n        Intent intent = new Intent(this, UnenrollDoc.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n\r\n    public String getQMString(String rowFromListView){\r\n        String name = rowFromListView.substring(1, rowFromListView.length()-1);\r\n\r\n        String qmString1=name.replaceAll(\"third=\", \"\");\r\n        String qmString2=qmString1.replaceAll(\",.+\", \"\");\r\n        Log.d(\"QMSTRING:\", qmString2);\r\n\r\n        return qmString2;\r\n    }\r\n\r\n    //Displaying the list of enrolled queue manager in the database\r\n    private class ListQM extends AsyncTask<String, String, String> {\r\n        Connection con = connectionClass.CONN();\r\n        boolean isSuccess = false;\r\n        String message = \"\";\r\n\r\n        @Override\r\n        protected void onPreExecute() {\r\n            Toast.makeText(getBaseContext(),\"Please wait..\",Toast.LENGTH_LONG).show();\r\n            super.onPreExecute();\r\n        }\r\n        @Override\r\n        protected String doInBackground(String... strings) {\r\n            try {\r\n                //listview, list the names of all enrolled department\r\n                qmList = (ListView) findViewById(R.id.listEnrolledQm);\r\n                String result = \"Database Connection Successful\\n\";\r\n                Statement st = con.createStatement();\r\n                ResultSet rset = st.executeQuery(SELECT_LIST_QM);\r\n                ResultSetMetaData rsmd = rset.getMetaData();\r\n\r\n                List<Map<String, String>> data = null;\r\n                data = new ArrayList<Map<String, String>> ();\r\n\r\n                while (rset.next()) {\r\n                    HashMap<String, String> datanum = new HashMap<String, String>();\r\n                    datanum.put(\"first\", rset.getString(1).toString());\r\n                    datanum.put(\"second\", rset.getString(2).toString());\r\n                    datanum.put(\"third\", rset.getString(3).toString());\r\n\r\n                    /*datanum.put(\"A\", \"CLINIC NAME\" + \"\\n\"+rset.getString(1).toString() + \"\\n \\n\" + \"DEPARTMENT NAME\" +\r\n                            \"\\n\" + rset.getString(2).toString() +\"\\n \\n\"\r\n                    + \"STATUS\" +\"\\n\" + rset.getString(3).toString());*/\r\n\r\n                    data.add(datanum);\r\n                }\r\n\r\n                listAdapter = new SimpleAdapter (UnenrollQm.this, data,\r\n                        R.layout.listview_row, new String[] {\"first\", \"second\", \"third\"}, new int[] {R.id.FIRST_COL, R.id.SECOND_COL, R.id.THIRD_COL});\r\n\r\n                while (rset.next()) {\r\n                    result += rset.getString(2) + \"\\n\";\r\n                }\r\n                message = \"DELETED\";\r\n            } catch (Exception ex) {\r\n                isSuccess = false;\r\n                message = \"Exceptions\" + ex;\r\n            }\r\n            return message;\r\n        }\r\n        @Override\r\n        protected void onPostExecute(String s) {\r\n            qmList.setAdapter(listAdapter);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/kerux/admin_thesis_kerux/unenrollment/UnenrollQm.java	(revision bf6a5c064cca6e90a95898e48ffaca3fa388aef2)
+++ app/src/main/java/com/kerux/admin_thesis_kerux/unenrollment/UnenrollQm.java	(date 1604852817239)
@@ -79,7 +79,7 @@
         qmList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-
+                Log.d("QMM",String.valueOf((qmList.getItemAtPosition(position))));
                 final String selectedFromList = getQMString(String.valueOf((qmList.getItemAtPosition(position))));
                 Toast.makeText(getApplicationContext(), "You selected: " + selectedFromList, Toast.LENGTH_LONG).show();
                 //Dialog box, for unenrolling
@@ -272,11 +272,10 @@
     public String getQMString(String rowFromListView){
         String name = rowFromListView.substring(1, rowFromListView.length()-1);
 
-        String qmString1=name.replaceAll("third=", "");
-        String qmString2=qmString1.replaceAll(",.+", "");
-        Log.d("QMSTRING:", qmString2);
+        String qmString1=name.replaceAll(".*second=", "");
 
-        return qmString2;
+
+        return qmString1;
     }
 
     //Displaying the list of enrolled queue manager in the database
Index: app/src/main/java/com/kerux/admin_thesis_kerux/login/Login.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kerux.admin_thesis_kerux.login;\r\n\r\nimport android.app.ProgressDialog;\r\nimport android.content.Intent;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.kerux.admin_thesis_kerux.R;\r\nimport com.kerux.admin_thesis_kerux.dbutility.ConnectionClass;\r\nimport com.kerux.admin_thesis_kerux.dbutility.DBUtility;\r\nimport com.kerux.admin_thesis_kerux.navigation.MainActivity;\r\nimport com.kerux.admin_thesis_kerux.security.Security;\r\nimport com.kerux.admin_thesis_kerux.security.SecurityWEB;\r\nimport com.kerux.admin_thesis_kerux.session.KeruxSession;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\npublic class Login extends AppCompatActivity implements DBUtility {\r\n    private static EditText username;\r\n    private static EditText password;\r\n    private static TextView attempt;\r\n    private static Button button_login;\r\n    private static Button bttnDashboard;\r\n    int attempt_counter = 5;\r\n\r\n    private KeruxSession session;\r\n    private SecurityWEB secweb;\r\n    private Security sec;\r\n\r\n    ProgressDialog progressDialog; //\r\n    ConnectionClass connectionClass;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n        connectionClass = new ConnectionClass();\r\n\r\n        progressDialog=new ProgressDialog(this);//\r\n\r\n        username = (EditText)findViewById(R.id.txtboxUname);\r\n        password = (EditText)findViewById(R.id.txtboxPass);\r\n        button_login = (Button)findViewById(R.id.bttnLogin);\r\n        secweb=new SecurityWEB();\r\n        session = new KeruxSession(getApplicationContext());\r\n        /*bttnDashboard = findViewById(R.id.bttnDashboard);*/\r\n\r\n       /* bttnDashboard.setOnClickListener(new View.OnClickListener() {//\r\n            @Override\r\n            public void onClick(View v) {\r\n                GoToDashboard();\r\n            }\r\n        });*/\r\n\r\n        button_login.setOnClickListener(new View.OnClickListener() {//\r\n            @Override\r\n            public void onClick(View v) {\r\n                Dologin dologin=new Dologin();\r\n                dologin.execute();\r\n                insertAudit();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public void GoToDashboard(){\r\n        Intent intent = new Intent(this, MainActivity.class);\r\n        startActivity(intent);\r\n    }\r\n    public void insertAudit(){\r\n        Connection con = connectionClass.CONN();\r\n        PreparedStatement ps = null;\r\n        sec = new Security();\r\n\r\n        try {\r\n            String queryAUDIT = INSERT_AUDIT_LOG;\r\n            PreparedStatement psAUDIT = con.prepareStatement(queryAUDIT);\r\n            psAUDIT.setString(1, sec.encrypt(\"login\"));\r\n            psAUDIT.setString(2, sec.encrypt(\"login\"));\r\n            psAUDIT.setString(3, sec.encrypt(\"Logging in to the app\"));\r\n            psAUDIT.setString(4, sec.encrypt(\"none\"));\r\n            psAUDIT.setString(5, sec.encrypt(\"login\"));\r\n            psAUDIT.setString(6, session.getusername());\r\n            psAUDIT.executeUpdate();\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private class Dologin extends AsyncTask<String,String,String> {\r\n\r\n        String uname=username.getText().toString();\r\n        String pw=password.getText().toString();\r\n        int adminId;\r\n        int clinicid;\r\n        String z=\"\";\r\n\r\n        boolean isSuccess=false;\r\n\r\n        String firstName,lastName,email, usernam;\r\n\r\n        @Override\r\n        protected void onPreExecute() {\r\n            progressDialog.setMessage(\"Loading...\");\r\n            progressDialog.show();\r\n\r\n            super.onPreExecute();\r\n        }\r\n\r\n        @Override\r\n        protected String doInBackground(String... params) {\r\n            if(uname.trim().equals(\"\")||pw.trim().equals(\"\"))\r\n                z = \"Please enter all fields....\";\r\n            else\r\n            {\r\n                try {\r\n                    Connection con = connectionClass.CONN();\r\n                    if (con == null) {\r\n                        z = \"Please check your internet connection\";\r\n                    } else {\r\n\r\n                        String query= SELECT_ADMIN_LOGIN;\r\n\r\n                        PreparedStatement ps = con.prepareStatement(query);\r\n                        ps.setString(1, secweb.encrypt(uname));\r\n                        ps.setString(2, secweb.encrypt(pw));\r\n\r\n                        ResultSet rs=ps.executeQuery();\r\n                        /*z=secweb.encrypt(uname) + \" \" + secweb.encrypt(pw);*/\r\n                        z = \"Successfully logged in\";\r\n                        while (rs.next()) {\r\n                            adminId=rs.getInt(1);\r\n                            firstName = rs.getString(2);\r\n                            lastName = rs.getString(3);\r\n                            email=rs.getString(4);\r\n                            clinicid=rs.getInt(5);\r\n                            usernam=rs.getString(6);\r\n\r\n                            //SET SESSION\r\n                            session.setadminid(String.valueOf(adminId));\r\n                            session.setfirstname(firstName);\r\n                            session.setlastname(lastName);\r\n                            session.setemail(email);\r\n                            session.setclinicid(String.valueOf(clinicid));\r\n                            session.setusername(usernam);\r\n                            isSuccess = true;\r\n                        }\r\n                    }\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    isSuccess = false;\r\n                    z = \"Exceptions\"+ex;\r\n                }\r\n/*                catch (Exception e) {\r\n                    Thread.dumpStack(); //always put this from sir mon\r\n                }*/\r\n            }\r\n            return z;\r\n        }\r\n\r\n        @Override\r\n        protected void onPostExecute(String s) {\r\n            Toast.makeText(getBaseContext(),\"\"+z,Toast.LENGTH_LONG).show();\r\n\r\n            if(isSuccess) {\r\n                Intent intent=new Intent(Login.this, MainActivity.class);\r\n                intent.putExtra(\"adminname\", firstName+\" \"+lastName);\r\n                startActivity(intent);\r\n            }\r\n            progressDialog.hide();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/kerux/admin_thesis_kerux/login/Login.java	(revision bf6a5c064cca6e90a95898e48ffaca3fa388aef2)
+++ app/src/main/java/com/kerux/admin_thesis_kerux/login/Login.java	(date 1604839307739)
@@ -4,6 +4,7 @@
 import android.content.Intent;
 import android.os.AsyncTask;
 import android.os.Bundle;
+import android.util.Log;
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
@@ -32,7 +33,6 @@
     private static Button button_login;
     private static Button bttnDashboard;
     int attempt_counter = 5;
-
     private KeruxSession session;
     private SecurityWEB secweb;
     private Security sec;
