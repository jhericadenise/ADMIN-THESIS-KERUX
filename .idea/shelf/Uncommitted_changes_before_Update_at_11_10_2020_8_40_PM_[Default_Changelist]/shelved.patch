Index: app/src/main/java/com/kerux/admin_thesis_kerux/dbutility/DBUtility.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kerux.admin_thesis_kerux.dbutility;\r\n\r\npublic interface DBUtility {\r\n\r\n    String jdbcDriverName = \"com.mysql.jdbc.Driver\";//vxcd9lOiVlb9DcyuaKAzLr5qD7AQB+5gr7zwfl1MXhY=\r\n    String jdbcUrl =\"jdbc:mysql://192.168.1.13/kerux\";//jdbc:mysql://192.168.1.1/keruxdb\r\n    String dbUserName = \"user\";//user//o9gPQILs8mlgWTtuaBMBFA==\r\n    String dbPassword = \"admin\";//admin//oCeOPEBYh4uhgDL4d2Q/8g==\r\n\r\n/*    String jdbcDriverName = \"com.mysql.jdbc.Driver\";\r\n    String jdbcUrl =\"jdbc:mysql://10.70.0.17/keruxdbupdate\";\r\n    String dbUserName = \"KeruxAdmin\";\r\n    String dbPassword = \"admin\";*/\r\n\r\n    //LIST VIEW DISPLAY\r\n    //Department\r\n    String SELECT_LIST_DEPT = \"SELECT clinic.clinicName, department.Name, department.Status from clinic \" +\r\n            \"INNER JOIN department ON clinic.Clinic_ID = department.Clinic_ID WHERE department.Status = 'Active'\";\r\n    //Doctor\r\n    String SELECT_LIST_DOC = \"select clinic.clinicName, department.Name, doctor.FirstName, doctor.LastName \" +\r\n            \"from clinic INNER JOIN doctor ON clinic.Clinic_ID = doctor.Clinic_ID \" +\r\n            \"INNER JOIN department ON department.Department_ID = doctor.Department_ID WHERE doctor.Status = 'Active'\";\r\n    //Queue Manager\r\n    String SELECT_LIST_QM = \"SELECT department.Name, queuemanager.FirstName, queuemanager.LastName from department INNER JOIN queuemanager ON department.Department_ID = queuemanager.Department_ID WHERE queuemanager.Status = 'Active'\";\r\n    //Accounts Patient\r\n    String SELECT_ACCOUNTS_LIST = \"select patient_type.Type, patient.ContactNo, patient.FirstName, patient.LastName, patient.Email from patient_type \" +\r\n            \"INNER JOIN patient ON patient_type.PatientType_ID = patient.PatientType_ID WHERE patient.Status = 'Active'\";\r\n    //Blocked Patients\r\n    String SELECT_BLOCKED_USERS = \"select FirstName, LastName, Status from patient WHERE Status = 'Blocked'\";\r\n\r\n    //Audit Log\r\n    String SELECT_AUDIT = \"SELECT Log_ID, TableName, EventType, SqlCommand, OldData, NewData, LoginName, TimeStamp from audit_log\";\r\n\r\n    //For Logging in\r\n    String SELECT_ADMIN_LOGIN = \"SELECT admin.Admin_ID, admin.FirstName, admin.LastName, admin.Email, admin_enrollment.Clinic_ID, admin.Username from admin \" +\r\n            \"INNER JOIN admin_enrollment ON admin.Admin_ID = admin_enrollment.Admin_ID WHERE admin.Username =? and admin.Password=?\";\r\n\r\n    //LIST VIEW DISPLAY UNENROLLED USERS\r\n    String SELECT_UNENROLLED_DEPT = \"SELECT * from department where Status =?\";\r\n    String SELECT_UNENROLLED_DOC = \"SELECT * from doctor where Status = ?\";\r\n    String SELECT_UNENROLLED_QM = \"SELECT * from queuemanager where Status = ?\";\r\n\r\n    //INSERTING RECORDS\r\n    //Doctor\r\n    String INSERT_DOCTOR = \"insert into doctor (DoctorType_ID, Clinic_ID, reasonrevoke_id, FirstName, LastName, Department_ID, \" +\r\n            \"RoomNo, Schedule1, Schedule2, Days, Status) values \" +\r\n            \"(?,?,?,?,?,?,?,?,?,?,?)\";\r\n    //Department\r\n    String INSERT_DEPT = \"insert into department (Clinic_ID, ReasonRevoke_ID, Name, Status) values (?,?,?,?)\";\r\n    //Queue Manager\r\n    String INSERT_QM = \"insert into queuemanager (Clinic_ID, Department_ID, reasonrevoke_id, Username, \" +\r\n            \"Password, FirstName, LastName, Email, Status) values (?,?,?,?,?,?,?,?,?)\";\r\n\r\n\r\n\r\n    String SELECT_NEW_DEPARTMENT_ID = \"Select MAX(department_id) from department\";\r\n    String SELECT_NEW_DOCTOR_ID = \"Select MAX(doctor_id) from doctor\";\r\n    String SELECT_NEW_QUEUEMANAGER_ID = \"Select MAX(queuemanager_id) from queuemanager\";\r\n\r\n    //INSERTING RECORDS IN ENROLLMENT\r\n    String INSERT_DEPT_ENROLLMENT = \"INSERT INTO department_enrollment (Admin_ID, Department_ID, Clinic_ID) values (?,?,?)\";\r\n    String INSERT_QM_ENROLLMENT = \"INSERT INTO qmenrollment (QueueManager_ID, Admin_ID, Department_ID, Clinic_ID) values (?,?,?,?)\";\r\n    String INSERT_DOC_ENROLLMENT = \"INSERT INTO doctor_enrollment (Admin_ID, Clinic_ID, Department_ID, Doctor_ID) values (?,?,?,?)\";\r\n    String INSERT_DOC_TYPE_ENROLLMENT = \"INSERT INTO doctor_type (DoctorType) values (?)\";\r\n\r\n    //INSERTING DATAS IN AUDIT\r\n    String INSERT_AUDIT_LOG = \"INSERT INTO audit_log (TableName, EventType, SqlCommand, OldData, NewData, LoginName)\" +\r\n            \"values (?,?,?,?,?,?)\";\r\n\r\n    //VALIDATION\r\n    String VALIDATION_DEPT = \"SELECT * from department where name = ? AND Status = 'Active' AND Clinic_ID = ? AND Clinic_ID = ?\";\r\n    String VALIDATION_DOCTOR = \"SELECT * from doctor where firstName = ? AND lastName = ? AND Status = 'Active' AND Clinic_ID = ?\";\r\n    String VALIDATION_QM = \"SELECT * from queuemanager where firstName = ? AND LastName = ? AND Status = 'Active' AND Clinic_ID = ?\";\r\n    String VALIDATION_DOC_TYPE = \"SELECT * FROM doctor_type WHERE DoctorType = ?\";\r\n\r\n    //UNENROLLING RECORDS\r\n    String UNENROLL_QM = \"UPDATE queuemanager SET Status = 'Inactive' WHERE FirstName = ?\";\r\n    String UNENROLL_DOCTOR = \"UPDATE doctor SET Status = 'Inactive' WHERE FirstName = ?\";\r\n    String UNENROLL_DEPT = \"UPDATE department SET Status = 'Inactive' WHERE Name = ?\";\r\n    String BLOCK_PRIVILEGES = \"UPDATE patient SET Status = 'Blocked' WHERE FirstName = ?\";\r\n    //REASON\r\n    String UNENROLL_DOC_REASON = \"UPDATE doctor SET doctor.ReasonRevoke_ID = (SELECT reason_revoke.reasonrevoke_id \" +\r\n            \"FROM reason_revoke WHERE reason_revoke.reason=? ) WHERE doctor.FirstName = ?\";\r\n    String UNENROLL_DEPT_REASON = \"UPDATE department SET department.ReasonRevoke_ID = (SELECT reason_revoke.reasonrevoke_id \" +\r\n            \"FROM reason_revoke WHERE reason_revoke.reason=? ) WHERE department.Name = ?\";\r\n    String UNENROLL_QM_REASON = \"UPDATE queuemanager SET queuemanager.Reasonrevoke_id=(SELECT reason_revoke.reasonrevoke_id \" +\r\n            \"FROM reason_revoke WHERE reason_revoke.reason=? ) WHERE queuemanager.firstname = ?\";\r\n    String BLOCK_ACC_REASON = \"UPDATE queuemanager SET queuemanager.Reasonrevoke_id=(SELECT reason_revoke.reasonrevoke_id \" +\r\n            \"FROM reason_revoke WHERE reason_revoke.reason=? ) WHERE queuemanager.firstname = ?\";\r\n\r\n    //UPDATE ADMIN PROFILE\r\n    String UPDATE_PROFILE=\"UPDATE admin SET FirstName = ?, LastName = ?, Email = ?, Username = ?, Password = ? WHERE Admin_ID = ?\";\r\n\r\n    //sql statement for edit profile to not require the input of password when just editing basic patient information\r\n    String UPDATE_PROFILE_PASS = \"UPDATE admin SET password = ?\";\r\n\r\n    //sql statement to compare the \"old password\" the patient has inputted in the text field from the one in the database\r\n    String CONFIRM_ADMIN_PASS = \"SELECT Password FROM admin where Password = ?\";\r\n\r\n    //COUNTING RECORDS\r\n    String TOTAL_NUM_LOGIN = \"SELECT COUNT(TableName) from audit_log WHERE TableName = 'login'\";\r\n    String TOTAL_NUM_ENROLLMENT_DEPT = \"SELECT COUNT(TableName) from audit_log WHERE TableName = 'department_enrollment'\";\r\n    String TOTAL_NUM_ENROLLMENT_DOC = \"SELECT COUNT(TableName) from audit_log WHERE TableName = 'doctor_enrollment'\";\r\n    String TOTAL_NUM_ENROLLMENT_QM = \"SELECT COUNT(TableName) from audit_log WHERE TableName = 'qmenrollment'\";\r\n    String TOTAL_NUM_UNENROLL_DEPT = \"SELECT COUNT(TableName) from audit_log WHERE TableName = 'qmenrollment'\";\r\n    String TOTAL_NUM_UNENROLL_DOC = \"SELECT COUNT(TableName) from audit_log WHERE TableName = 'unenroll department'\";\r\n    String TOTAL_NUM_UNENROLL_QM = \"SELECT COUNT(TableName) from audit_log WHERE TableName = 'unenroll queue manager'\";\r\n    String SELECT_AUDIT_LIST = \"SELECT TableName, EventType, TimeStamp FROM audit_log\";\r\n\r\n    //GENERATE STATISTIC\r\n    String QUEUES_SERVED = \"SELECT QueuesServed, TimeEnd FROM statistics\";\r\n    String QUEUES_CANCELLED = \"SELECT QueuesCancelled, TimeEnd FROM statistics\";\r\n    String HIGHEST_DOC_QUEUES = \"SELECT HighestDocQueues, TimeEnd FROM statistics\";\r\n    String HIGHEST_DEPT_QUEUES = \"SELECT HighestDeptQueues, TimeEnd FROM statistics\";\r\n\r\n    String INSERT_STAT = \"INSERT INTO statistics (QueuesServed, QueuesCancelled, HighestDocQueues, HighestDeptQueues, TimeStart, TimeEnd) SELECT \" +\r\n            \"(SELECT COUNT(ql.QueueList_ID) FROM queuelist ql INNER JOIN queue q on q.Queue_ID = ql.Queue_ID INNER JOIN queueconnector qc on qc.Queue_ID = q.Queue_ID INNER JOIN queuemanager qm on qm.QueueManager_ID = qc.QueueManager_ID WHERE qm.Clinic_ID = ? AND ql.Status='Served'), \" +\r\n            \"(SELECT COUNT(ql.QueueList_ID) FROM queuelist ql INNER JOIN queue q on q.Queue_ID = ql.Queue_ID INNER JOIN queueconnector qc on qc.Queue_ID = q.Queue_ID INNER JOIN queuemanager qm on qm.QueueManager_ID = qc.QueueManager_ID WHERE qm.Clinic_ID = ? AND ql.Status='Cancelled'), \" +\r\n            \"(SELECT CONCAT(Doctor.FirstName, Doctor.LastName) FROM DOCTOR INNER JOIN queue on queue.Doctor_ID = doctor.Doctor_ID WHERE queue.Queue_ID = (SELECT z.queueid FROM (SELECT w.Queue_ID as queueid, MAX(w.num) FROM (SELECT Queue_ID as Queue_ID, count(*) as num FROM instance GROUP BY Queue_ID) w) z)), \" +\r\n            \"(SELECT Department.Name FROM department INNER JOIN queue on queue.Department_ID = department.Department_ID WHERE queue.Queue_ID = (SELECT x.queueid FROM (SELECT y.Queue_ID as queueid, MAX(y.num) FROM (SELECT Queue_ID as Queue_ID, count(*) as num FROM instance GROUP BY Queue_ID) y) x)), CURRENT_TIME, CURRENT_TIME\";\r\n    String SELECT_STAT=\"SELECT QueuesServed, QueuesCancelled, HighestDocQueues, HighestDeptQueues from statistics ORDER BY statistics_id desc limit 1\";\r\n\r\n    //Dashboard count\r\n    String DB_DEPT = \"SELECT COUNT(Department_ID) from department WHERE Status = 'Active'\";\r\n    String DB_QM = \"SELECT COUNT(QueueManager_ID) from queuemanager WHERE Status = 'Active'\";\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/kerux/admin_thesis_kerux/dbutility/DBUtility.java	(revision d542ca0b5e01a9154d37d2ab860d1aac67e4262d)
+++ app/src/main/java/com/kerux/admin_thesis_kerux/dbutility/DBUtility.java	(date 1604905637439)
@@ -2,15 +2,15 @@
 
 public interface DBUtility {
 
-    String jdbcDriverName = "com.mysql.jdbc.Driver";//vxcd9lOiVlb9DcyuaKAzLr5qD7AQB+5gr7zwfl1MXhY=
+/*    String jdbcDriverName = "com.mysql.jdbc.Driver";//vxcd9lOiVlb9DcyuaKAzLr5qD7AQB+5gr7zwfl1MXhY=
     String jdbcUrl ="jdbc:mysql://192.168.1.13/kerux";//jdbc:mysql://192.168.1.1/keruxdb
     String dbUserName = "user";//user//o9gPQILs8mlgWTtuaBMBFA==
-    String dbPassword = "admin";//admin//oCeOPEBYh4uhgDL4d2Q/8g==
+    String dbPassword = "admin";//admin//oCeOPEBYh4uhgDL4d2Q/8g==*/
 
-/*    String jdbcDriverName = "com.mysql.jdbc.Driver";
+    String jdbcDriverName = "com.mysql.jdbc.Driver";
     String jdbcUrl ="jdbc:mysql://10.70.0.17/keruxdbupdate";
     String dbUserName = "KeruxAdmin";
-    String dbPassword = "admin";*/
+    String dbPassword = "admin";
 
     //LIST VIEW DISPLAY
     //Department
@@ -32,8 +32,8 @@
     String SELECT_AUDIT = "SELECT Log_ID, TableName, EventType, SqlCommand, OldData, NewData, LoginName, TimeStamp from audit_log";
 
     //For Logging in
-    String SELECT_ADMIN_LOGIN = "SELECT admin.Admin_ID, admin.FirstName, admin.LastName, admin.Email, admin_enrollment.Clinic_ID, admin.Username from admin " +
-            "INNER JOIN admin_enrollment ON admin.Admin_ID = admin_enrollment.Admin_ID WHERE admin.Username =? and admin.Password=?";
+    String SELECT_ADMIN_LOGIN = "SELECT admin.Admin_ID, admin.FirstName, admin.LastName, admin.Email, adminenrollment.Clinic_ID, admin.Username from admin " +
+            "INNER JOIN adminenrollment ON admin.Admin_ID = adminenrollment.Admin_ID WHERE admin.Username =? and admin.Password=?";
 
     //LIST VIEW DISPLAY UNENROLLED USERS
     String SELECT_UNENROLLED_DEPT = "SELECT * from department where Status =?";
Index: app/src/main/java/com/kerux/admin_thesis_kerux/enrollment/EnrollDoctor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kerux.admin_thesis_kerux.enrollment;\r\n\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.CheckBox;\r\nimport android.widget.EditText;\r\nimport android.widget.Spinner;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\n\r\nimport com.kerux.admin_thesis_kerux.R;\r\nimport com.kerux.admin_thesis_kerux.dbutility.ConnectionClass;\r\nimport com.kerux.admin_thesis_kerux.dbutility.DBUtility;\r\nimport com.kerux.admin_thesis_kerux.navigation.EditProfile;\r\nimport com.kerux.admin_thesis_kerux.navigation.EnrollmentPage;\r\nimport com.kerux.admin_thesis_kerux.navigation.MainActivity;\r\nimport com.kerux.admin_thesis_kerux.navigation.ManageAccounts;\r\nimport com.kerux.admin_thesis_kerux.reports.ViewAuditReportsActivity;\r\nimport com.kerux.admin_thesis_kerux.reports.ViewStatReportsActivity;\r\nimport com.kerux.admin_thesis_kerux.security.Security;\r\nimport com.kerux.admin_thesis_kerux.session.KeruxSession;\r\nimport com.kerux.admin_thesis_kerux.spinner.Downloader;\r\nimport com.kerux.admin_thesis_kerux.unenrollment.UnenrollDoc;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\npublic class EnrollDoctor extends AppCompatActivity implements DBUtility{\r\n\r\n    private static String urlDeptSpinner = \"http://192.168.1.13:89/kerux/departmentSpinner.php\"; /*10.0.2.2:89*/\r\n    private static String urlDocTypeSpinner = \"http://192.168.1.13:89/kerux/doctorTypeSpinner.php\";\r\n    private EditText doctorFName;\r\n    private EditText doctorLName;\r\n    private EditText roomNo;\r\n    private EditText schedule1;\r\n    private EditText schedule2;\r\n    private CheckBox monday;\r\n    private CheckBox tuesday;\r\n    private CheckBox wednesday;\r\n    private CheckBox thursday;\r\n    private CheckBox friday;\r\n    private CheckBox saturday;\r\n    private Spinner spinnerDocType;\r\n    private Spinner spinnerDep;\r\n    private Spinner spinnerClinic;\r\n    private EditText docType;\r\n\r\n    ConnectionClass connectionClass;\r\n\r\n    KeruxSession session;\r\n\r\n    DrawerLayout drawerLayout;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_enroll_doctor);\r\n        connectionClass = new ConnectionClass(); //create ConnectionClass\r\n        final Context context = this;\r\n        session=new KeruxSession(getApplicationContext());\r\n\r\n        drawerLayout = findViewById(R.id.drawer_layout);\r\n\r\n        Button bttnEnrollDoc = findViewById(R.id.bttnEnrollDoc);\r\n        Button bttnAdd = findViewById(R.id.bttnAddDocType);\r\n        doctorFName = (EditText) findViewById(R.id.txtboxDocFName);\r\n        doctorLName = (EditText) findViewById(R.id.txtboxDocLName);\r\n        roomNo = (EditText) findViewById(R.id.txtboxRoomNo);\r\n        schedule1 = (EditText) findViewById(R.id.txtboxSched1);\r\n        schedule2 = (EditText) findViewById(R.id.txtboxSched2);\r\n        monday = (CheckBox) findViewById(R.id.cBoxMon);\r\n        tuesday = (CheckBox) findViewById(R.id.cBoxTues);\r\n        wednesday = (CheckBox) findViewById(R.id.cBoxWed);\r\n        thursday = (CheckBox) findViewById(R.id.cBoxThurs);\r\n        friday = (CheckBox) findViewById(R.id.cBoxFriday);\r\n        saturday = (CheckBox) findViewById(R.id.cBoxSat);\r\n        spinnerDocType = (Spinner) findViewById(R.id.spinnerDocType);\r\n        spinnerDep = (Spinner) findViewById(R.id.spinnerDepType);\r\n        docType = findViewById(R.id.txtboxDoctorType);\r\n\r\n        bttnAdd.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n               /* Intent intent = new Intent(EnrollDoctor.this, EnrollDoctorType.class);\r\n                startActivity(intent);*/\r\n                // get prompts.xml view\r\n                LayoutInflater li = LayoutInflater.from(context);\r\n                View promptsView = li.inflate(R.layout.activity_enroll_doctor_type, null);\r\n\r\n                AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(context);\r\n\r\n                // set prompts.xml to alertdialog builder\r\n                alertDialogBuilder.setView(promptsView);\r\n\r\n                final EditText userInput = (EditText) promptsView.findViewById(R.id.txtboxDoctorType);\r\n\r\n                // set dialog message\r\n                alertDialogBuilder\r\n                        .setCancelable(false)\r\n                        .setPositiveButton(\"ENROLL\",\r\n                                new DialogInterface.OnClickListener() {\r\n                                    public void onClick(DialogInterface dialog,int id) {\r\n                                        // get user input and set it to result\r\n                                        // edit text\r\n                                        DoEnrollDocType doEnrollDocType = new DoEnrollDocType();\r\n                                        doEnrollDocType.execute();\r\n                                    }\r\n                                })\r\n                        .setNegativeButton(\"CANCEL\",\r\n                                new DialogInterface.OnClickListener() {\r\n                                    public void onClick(DialogInterface dialog,int id) {\r\n                                        dialog.cancel();\r\n                                    }\r\n                                });\r\n\r\n                // create alert dialog\r\n                AlertDialog alertDialog = alertDialogBuilder.create();\r\n                // show it\r\n                alertDialog.show();\r\n            }\r\n        });\r\n\r\n        bttnEnrollDoc.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (!validateFName() || !validateLName() ||!validateRoomNo() || !validateSched()) {\r\n                    confirmInput();\r\n                } else {\r\n                    AlertDialog.Builder builder = new AlertDialog.Builder(EnrollDoctor.this);\r\n                    builder.setMessage(\"Are you sure you want to Enroll?\")\r\n                            .setCancelable(false)\r\n                            .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\r\n                                public void onClick(DialogInterface dialog, int id) {\r\n                                    EnrollDoctor.DoEnrollDoc doenroll = new EnrollDoctor.DoEnrollDoc();\r\n                                    doenroll.execute();\r\n                                    doctorFName.getText().clear();\r\n                                    doctorLName.getText().clear();\r\n                                    roomNo.getText().clear();\r\n                                    schedule1.getText().clear();\r\n                                    schedule2.getText().clear();\r\n                                }\r\n                            })\r\n                            .setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\r\n                                public void onClick(DialogInterface dialog, int id) {\r\n                                    dialog.cancel();\r\n                                }\r\n                            });\r\n                    AlertDialog alert = builder.create();\r\n                    alert.show();\r\n                }\r\n            }\r\n        });\r\n\r\n        Downloader dep = new Downloader(EnrollDoctor.this, urlDeptSpinner, spinnerDep, \"Name\", \"Choose Department\");\r\n        dep.execute();\r\n        Downloader docType = new Downloader(EnrollDoctor.this, urlDocTypeSpinner, spinnerDocType, \"DoctorType\", \"Choose Doctor Type\");\r\n        docType.execute();\r\n\r\n    }\r\n\r\n    public  void openDialog(){\r\n\r\n    }\r\n\r\n    public void ClickMenu (View view){\r\n        //open drawer\r\n        MainActivity.openDrawer(drawerLayout);\r\n    }\r\n\r\n    public void ClickLogo (View view){\r\n        //Close drawer\r\n        MainActivity.closeDrawer(drawerLayout);\r\n    }\r\n\r\n    public void ClickDashboard(View view){\r\n        //Redirect activity to dashboard\r\n        MainActivity.redirectActivity(this, MainActivity.class);\r\n    }\r\n\r\n    public void ClickEditProfile(View view){\r\n        //Redirect activity to dashboard\r\n        MainActivity.redirectActivity(this, EditProfile.class);\r\n    }\r\n\r\n\r\n    public void ClickManageAccounts(View view){\r\n        //Redirect activity to manage accounts\r\n        MainActivity.redirectActivity(this, ManageAccounts.class);\r\n    }\r\n\r\n    public void ClickEnrollment(View view){\r\n        //Recreate activity\r\n        MainActivity.redirectActivity(this, EnrollmentPage.class);\r\n    }\r\n\r\n    public void ClickRevoke(View view){\r\n        //redirect activity to revoke page\r\n        MainActivity.redirectActivity(this, UnenrollDoc.class);\r\n    }\r\n\r\n    public void ClickViewStat(View view){\r\n        MainActivity.redirectActivity(this, ViewStatReportsActivity.class);\r\n    }\r\n\r\n    public void ClickViewAudit(View view){\r\n        MainActivity.redirectActivity(this, ViewAuditReportsActivity.class);\r\n    }\r\n\r\n\r\n    public void ClickLogout(View view){\r\n        MainActivity.logout(this);\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        //close drawer\r\n        MainActivity.closeDrawer(drawerLayout);\r\n    }\r\n\r\n    public void goBack() {\r\n        Intent intent = new Intent(this, EnrollmentPage.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    private boolean validateFName() {\r\n        String firstname = doctorFName.getText().toString().trim();\r\n\r\n        if(firstname.isEmpty()){\r\n            doctorFName.setError(\"Field can't be empty\");\r\n            return false;\r\n        } else if (firstname.length() < 3){\r\n            doctorFName.setError(\"First Name too short\");\r\n            return false;\r\n        } else if(firstname.matches(\"[^a-zA-Z]\")) {\r\n            doctorLName.setError(\"Last name cannot have number values\");\r\n            return false;\r\n        } else {\r\n            doctorFName.setError(null);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    private boolean validateLName() {\r\n        String lastname = doctorLName.getText().toString().trim();\r\n\r\n        if(lastname.isEmpty()){\r\n            doctorLName.setError(\"Field can't be empty\");\r\n            return false;\r\n        } else if (lastname.length() < 2){\r\n            doctorLName.setError(\"Last Name too short\");\r\n            return false;\r\n        } else if(lastname.matches(\"[^a-zA-Z]\")) {\r\n            doctorLName.setError(\"Last name cannot have number values\");\r\n            return false;\r\n        }\r\n        else {\r\n            doctorLName.setError(null);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    private boolean validateSched() {\r\n        String sched1 = schedule1.getText().toString().trim();\r\n        String sched2 = schedule2.getText().toString().trim();\r\n\r\n        if(sched1.isEmpty()){\r\n            schedule1.setError(\"Field can't be empty\");\r\n            return false;\r\n        } else if(sched2.isEmpty()){\r\n            schedule2.setError(\"Field can't be empty\");\r\n            return false;\r\n        } else {\r\n            schedule1.setError(null);\r\n            schedule2.setError(null);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    private boolean validateRoomNo() {\r\n        String room = roomNo.getText().toString().trim();\r\n\r\n        if(room.isEmpty()){\r\n            roomNo.setError(\"Field can't be empty\");\r\n            return false;\r\n        } else {\r\n            roomNo.setError(null);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public boolean confirmInput() {\r\n        String input = \"First Name: \" + doctorFName.getText().toString();\r\n        input += \"\\n\";\r\n        input += \"Last Name: \" + doctorLName.getText().toString();\r\n        input += \"Schedule: \" + schedule1.getText().toString();\r\n        input += \"Room No: \" + roomNo.getText().toString();\r\n        Toast.makeText(this, input, Toast.LENGTH_SHORT).show();\r\n        return false;\r\n    }\r\n\r\n    //method for enrolling a doctor into the database\r\n    private class DoEnrollDoc extends AsyncTask<String, String, String> {\r\n\r\n        Security sec = new Security();\r\n        boolean isSuccess = false;\r\n        boolean hasRecord = false;\r\n        String message = \"\";\r\n        int reason = 0;\r\n        String docFName = doctorFName.getText().toString();\r\n        String docLName = doctorLName.getText().toString();\r\n        String roomNum = roomNo.getText().toString();\r\n        String sched1 = schedule1.getText().toString();\r\n        String sched2 = schedule2.getText().toString();\r\n        String cboxMon = monday.getText().toString();\r\n        String cboxTues = tuesday.getText().toString();\r\n        String cboxWed = wednesday.getText().toString();\r\n        String cboxThurs = thursday.getText().toString();\r\n        String cboxFri = friday.getText().toString();\r\n        String cboxSat = saturday.getText().toString();\r\n        String docDays=\"\";\r\n        int docType = (int)spinnerDocType.getSelectedItemId();\r\n        int dept = (int)spinnerDep.getSelectedItemId();\r\n        int clinic = Integer.parseInt(session.getclinicid());\r\n        String status = \"Active\";\r\n\r\n        @Override\r\n        protected void onPreExecute() {\r\n            super.onPreExecute();\r\n        }\r\n\r\n        @Override\r\n        protected String doInBackground(String... params) {\r\n            Connection con = connectionClass.CONN();\r\n            PreparedStatement ps1 = null;\r\n            try {\r\n                ps1 = con.prepareStatement(VALIDATION_DOCTOR);\r\n                ps1.setString(1, docFName);\r\n\r\n                ResultSet rs = ps1.executeQuery();\r\n\r\n                if (rs.next()) {\r\n                    hasRecord=true;\r\n\r\n                }\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            //checking if the record exists on the database\r\n            if (hasRecord){\r\n                message = \"Record already exists\";\r\n            }\r\n            else {\r\n                try {\r\n                    if (con == null) {\r\n                        message = \"Unsuccessful\";\r\n                    } else {\r\n\r\n                        if(cboxMon!=null){\r\n                            docDays+=cboxMon;\r\n                        }\r\n                        if(cboxTues!=null){\r\n                            docDays+=cboxTues;\r\n                        }\r\n                        if(cboxWed!=null){\r\n                            docDays+=cboxWed;\r\n                        }\r\n                        if(cboxThurs!=null){\r\n                            docDays+=cboxThurs;\r\n                        }\r\n                        if(cboxFri!=null){\r\n                            docDays+=cboxFri;\r\n                        }\r\n                        if(cboxSat!=null){\r\n                            docDays+=cboxSat;\r\n                        }\r\n                        //inserting doctor in the database\r\n                        String query = INSERT_DOCTOR;\r\n                        PreparedStatement ps = con.prepareStatement(query);\r\n\r\n                        ps.setInt (1, docType);\r\n                        ps.setInt (2, clinic);\r\n                        ps.setInt(3, reason);\r\n                        ps.setString(4, docFName);\r\n                        ps.setString(5, docLName);\r\n                        ps.setInt (6, dept);\r\n                        ps.setString(7, roomNum);\r\n                        ps.setString(8, sched1);\r\n                        ps.setString(9, sched2);\r\n                        ps.setString(10, docDays);\r\n                        ps.setString(11, status);\r\n\r\n                        ps.execute();\r\n\r\n                        String query2=SELECT_NEW_DOCTOR_ID;\r\n                        PreparedStatement ps2 = con.prepareStatement(query2);\r\n                        ResultSet rs1 = ps2.executeQuery();\r\n                        while(rs1.next()){\r\n                            String newdocid=rs1.getString(1);\r\n                            String newdeptid=rs1.getString(1);\r\n\r\n                            //inserting into doctor_enrollment\r\n                            String query3=INSERT_DOC_ENROLLMENT;\r\n                            PreparedStatement ps3 = con.prepareStatement(query3);\r\n                            ps3.setString(1, session.getadminid());\r\n                            ps3.setString(2, session.getclinicid());\r\n                            ps3.setString(3, newdeptid);\r\n                            ps3.setString(4, newdocid);\r\n                            ps3.executeUpdate();\r\n\r\n                            //inserting to audit log\r\n                            String queryAUDIT=INSERT_AUDIT_LOG;\r\n                            PreparedStatement psAUDIT=con.prepareStatement(queryAUDIT);\r\n                            psAUDIT.setString(1, sec.encrypt(\"doctor\"));\r\n                            psAUDIT.setString(2, sec.encrypt(\"insert\"));\r\n                            psAUDIT.setString(3, sec.encrypt(\"Insert doctor record\"));\r\n                            psAUDIT.setString(4, sec.encrypt(\"none\"));\r\n                            psAUDIT.setString(5, sec.encrypt(String.valueOf(clinic)+\", \"+reason+\", \"+dept+\", \"+status));\r\n                            psAUDIT.setString(6, sec.encrypt(session.getusername()));\r\n                            psAUDIT.executeUpdate();\r\n                            //inserting to audit log\r\n                            PreparedStatement psAUDIT1=con.prepareStatement(queryAUDIT);\r\n                            psAUDIT.setString(1, sec.encrypt(\"doctor_enrollment\"));\r\n                            psAUDIT.setString(2, sec.encrypt(\"insert\"));\r\n                            psAUDIT.setString(3, sec.encrypt(\"Insert into doctor_enrollment table record\"));\r\n                            psAUDIT.setString(4, sec.encrypt(\"none\"));\r\n                            psAUDIT.setString(5, sec.encrypt(session.getadminid()+\", \"+newdocid+\", \"+ \", \"+ newdeptid + \", \" + session.getclinicid()));\r\n                            psAUDIT.setString(6,sec.encrypt(session.getusername()));\r\n                            psAUDIT.executeUpdate();\r\n                        }\r\n                        con.close();\r\n                        message = \"ADDED\";\r\n                    }\r\n                } catch (Exception ex) {\r\n                    isSuccess = false;\r\n                    message = \"Exceptions\" + ex;\r\n                }\r\n            }\r\n            return message;\r\n        }\r\n\r\n        @Override\r\n        protected void onPostExecute(String s) {\r\n            Toast.makeText(getBaseContext(), \"\" + message, Toast.LENGTH_LONG).show();\r\n\r\n            if (isSuccess) {\r\n                Intent intent = new Intent(EnrollDoctor.this, EnrollDoctor.class);\r\n                startActivity(intent);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private class DoEnrollDocType extends AsyncTask<String, String, String> {\r\n\r\n        Security sec = new Security();\r\n        boolean isSuccess = false;\r\n        String message = \"\";\r\n        String enrollDoctorType = docType.getText().toString();\r\n        boolean hasRecord = false;\r\n\r\n        @Override\r\n        protected void onPreExecute() {\r\n            super.onPreExecute();\r\n        }\r\n        @Override\r\n        protected String doInBackground(String... params) {\r\n            Connection con = connectionClass.CONN();\r\n          /*  PreparedStatement ps = null;\r\n            try {\r\n                ps = con.prepareStatement(VALIDATION_DOC_TYPE);\r\n                ps.setString(1, enrollDoctorType);\r\n\r\n                ResultSet rs=ps.executeQuery();\r\n\r\n                if(rs.next()){\r\n                    hasRecord = true;\r\n                }\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            message = \"Record already exists\";\r\n*/\r\n\r\n            if (enrollDoctorType.trim().equals(\"\")) {\r\n                message = \"Please enter all fields\";\r\n            }\r\n            else if (hasRecord){\r\n                message = \"Record already exists\";\r\n            }\r\n            else {\r\n                try {\r\n                    if (con == null) {\r\n                        message = \"CANNOT ADD RECORD\";\r\n\r\n                    } else {\r\n                        //inserting data of department to the database\r\n                        String query = INSERT_DOC_TYPE_ENROLLMENT;\r\n                        PreparedStatement ps1 = null;\r\n                        try {\r\n                            ps1 = con.prepareStatement(query);\r\n                            ps1.setString(1, enrollDoctorType);\r\n                            ps1.executeUpdate();\r\n                            message = \"Added Successfully!\";\r\n                        } catch (SQLException throwables) {\r\n                            throwables.printStackTrace();\r\n                        }\r\n                        con.close();\r\n                    }\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    isSuccess = false;\r\n                    message = \"Exceptions\"+ex;\r\n                    Log.d(\"ex\", ex.getMessage () + \" Jheca\");\r\n                }\r\n            }\r\n            return message;\r\n        }\r\n\r\n        @Override\r\n        protected void onPostExecute(String s) {\r\n\r\n            Toast.makeText(getBaseContext(), \"\" + message, Toast.LENGTH_LONG).show();\r\n\r\n            if (isSuccess) {\r\n                Intent intent = new Intent(EnrollDoctor.this, EnrollDoctor.class);\r\n                startActivity(intent);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/kerux/admin_thesis_kerux/enrollment/EnrollDoctor.java	(revision d542ca0b5e01a9154d37d2ab860d1aac67e4262d)
+++ app/src/main/java/com/kerux/admin_thesis_kerux/enrollment/EnrollDoctor.java	(date 1604906637896)
@@ -90,7 +90,7 @@
         saturday = (CheckBox) findViewById(R.id.cBoxSat);
         spinnerDocType = (Spinner) findViewById(R.id.spinnerDocType);
         spinnerDep = (Spinner) findViewById(R.id.spinnerDepType);
-        docType = findViewById(R.id.txtboxDoctorType);
+
 
         bttnAdd.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -106,8 +106,7 @@
                 // set prompts.xml to alertdialog builder
                 alertDialogBuilder.setView(promptsView);
 
-                final EditText userInput = (EditText) promptsView.findViewById(R.id.txtboxDoctorType);
-
+                docType = (EditText)promptsView.findViewById(R.id.txtboxDoctorType);
                 // set dialog message
                 alertDialogBuilder
                         .setCancelable(false)
Index: app/src/main/java/com/kerux/admin_thesis_kerux/reports/ViewStatReportsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kerux.admin_thesis_kerux.reports;\r\n\r\nimport android.app.ProgressDialog;\r\nimport android.content.Intent;\r\nimport android.net.Uri;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.FileProvider;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\n\r\nimport com.itextpdf.text.Document;\r\nimport com.itextpdf.text.DocumentException;\r\nimport com.itextpdf.text.PageSize;\r\nimport com.itextpdf.text.Paragraph;\r\nimport com.itextpdf.text.pdf.PdfWriter;\r\nimport com.kerux.admin_thesis_kerux.BuildConfig;\r\nimport com.kerux.admin_thesis_kerux.R;\r\nimport com.kerux.admin_thesis_kerux.dbutility.ConnectionClass;\r\nimport com.kerux.admin_thesis_kerux.dbutility.DBUtility;\r\nimport com.kerux.admin_thesis_kerux.navigation.EditProfile;\r\nimport com.kerux.admin_thesis_kerux.navigation.EnrollmentPage;\r\nimport com.kerux.admin_thesis_kerux.navigation.MainActivity;\r\nimport com.kerux.admin_thesis_kerux.navigation.ManageAccounts;\r\nimport com.kerux.admin_thesis_kerux.security.Security;\r\nimport com.kerux.admin_thesis_kerux.session.KeruxSession;\r\nimport com.kerux.admin_thesis_kerux.unenrollment.UnenrollDoc;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.OutputStream;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\n\r\npublic class ViewStatReportsActivity extends AppCompatActivity implements DBUtility {\r\n\r\n    DrawerLayout drawerLayout;\r\n    ConnectionClass connectionClass;\r\n    StatisticModel statModel;\r\n    private Button bttnDisplayStat;\r\n    private Button bttnGenerateStatReports;\r\n    private TextView txtServed;\r\n    private TextView txtCancelled;\r\n    private TextView docQueue;\r\n    private TextView deptQueue;\r\n    private TextView txtdate;\r\n\r\n    private String queuesServed;\r\n    private String queuesCancelled;\r\n    private String highestDocQueues;\r\n    private String highestDeptQueues;\r\n    private String statID;\r\n\r\n    File myFile;\r\n    ProgressDialog progressDialog;\r\n\r\n    KeruxSession session;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_view_stat_reports);\r\n        drawerLayout = findViewById(R.id.drawer_layout);\r\n        connectionClass=new ConnectionClass();\r\n        session=new KeruxSession(getApplicationContext());\r\n        statModel = new StatisticModel(getApplicationContext());\r\n        bttnDisplayStat=(Button)findViewById(R.id.bttnRefresh);\r\n        bttnDisplayStat.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                generateStat();\r\n            }\r\n        });\r\n        txtServed = (TextView)findViewById(R.id.txtQueuesServed);\r\n        txtCancelled = (TextView)findViewById(R.id.txtQueuesCancelled);\r\n        docQueue = (TextView)findViewById(R.id.txtHighestDocQueue);\r\n        deptQueue = (TextView)findViewById(R.id.txtHighestDeptQueue);\r\n        txtdate = (TextView)findViewById(R.id.txtTimeStamp);\r\n\r\n        txtdate.setText(timeStamp());\r\n\r\n        progressDialog=new ProgressDialog(this);\r\n\r\n        Intent i= getIntent();\r\n        queuesServed = i.getStringExtra(\"QueuesServed\");\r\n        queuesCancelled = i.getStringExtra(\"QueuesCancelled\");\r\n        highestDeptQueues = i.getStringExtra(\"HighestDocQueues\");\r\n        highestDocQueues = i.getStringExtra(\"HighestDeptQueues\");\r\n        statID=i.getStringExtra(\"Statistics_ID\");\r\n\r\n\r\n        bttnGenerateStatReports.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                GenerateRep generateRep = new GenerateRep();\r\n                generateRep.execute();\r\n            }\r\n        });\r\n    }\r\n    //Getting time stamp\r\n    public String timeStamp() {\r\n        Calendar calendar = Calendar.getInstance();\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy.MM.dd.HH.mm.ss\");\r\n        return sdf.format(calendar.getTime());\r\n    }\r\n\r\n    //Generate statistic reports\r\n    public void generateStat() {\r\n\r\n        String query = INSERT_STAT;\r\n        Connection con = connectionClass.CONN();\r\n        PreparedStatement ps = null;\r\n        try {\r\n            ps = con.prepareStatement(query);\r\n            ps.setString(1, session.getclinicid());\r\n            ps.setString(2, session.getclinicid());\r\n            int i=ps.executeUpdate();\r\n\r\n            if (i==1){\r\n                String query1 = SELECT_STAT;\r\n\r\n                PreparedStatement ps1 = con.prepareStatement(query1);\r\n                ResultSet rs=ps1.executeQuery();\r\n                while (rs.next()) {\r\n                    txtServed.setText(rs.getString(1));\r\n                    txtCancelled.setText(rs.getString(2));\r\n                    docQueue.setText(rs.getString(3));\r\n                    deptQueue.setText(rs.getString(4));\r\n\r\n                }\r\n            }\r\n\r\n        } catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void ClickMenu (View view){\r\n        //open drawer\r\n        MainActivity.openDrawer(drawerLayout);\r\n    }\r\n\r\n    public void ClickLogo (View view){\r\n        //Close drawer\r\n        MainActivity.closeDrawer(drawerLayout);\r\n    }\r\n\r\n    public void ClickDashboard(View view){\r\n        //Redirect activity to dashboard\r\n        MainActivity.redirectActivity(this, MainActivity.class);\r\n    }\r\n\r\n    public void ClickEditProfile(View view){\r\n        //Redirect activity to dashboard\r\n        MainActivity.redirectActivity(this, EditProfile.class);\r\n    }\r\n\r\n    public void ClickManageAccounts(View view){\r\n        //Redirect activity to manage accounts\r\n        MainActivity.redirectActivity(this, ManageAccounts.class);\r\n    }\r\n\r\n    public void ClickEnrollment(View view){\r\n        MainActivity.redirectActivity(this, EnrollmentPage.class);\r\n    }\r\n\r\n    public void ClickRevoke(View view){\r\n        //redirect activity to revoke page\r\n        MainActivity.redirectActivity(this, UnenrollDoc.class);\r\n    }\r\n\r\n    public void ClickViewStat(View view){\r\n        recreate();\r\n    }\r\n\r\n    public void ClickViewAudit(View view){\r\n        MainActivity.redirectActivity(this, ViewAuditReportsActivity.class);\r\n    }\r\n\r\n    public void ClickLogout(View view){\r\n        MainActivity.logout(this);\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        //close drawer\r\n        MainActivity.closeDrawer(drawerLayout);\r\n    }\r\n\r\n    //generate pdf file\r\n    private class GenerateRep extends AsyncTask<String, String, String> {\r\n        String z=\"\";\r\n        @Override\r\n        protected void onPreExecute() {\r\n            progressDialog.setMessage(\"Loading...\");\r\n            progressDialog.show();\r\n\r\n            super.onPreExecute();\r\n        }\r\n\r\n        @Override\r\n        protected String doInBackground(String... params) {\r\n            z=\"\";\r\n\r\n            try {\r\n                Connection con = connectionClass.CONN();\r\n                Security sec =new Security();\r\n                if (con == null) {\r\n                    z = \"Please check your internet connection\";\r\n                } else {\r\n                    createPdf();\r\n                    viewPdf();\r\n                    z=\"Report Generated\";\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                z = \"Exceptions\"+ex;\r\n            }\r\n            return z;\r\n        }\r\n\r\n        @Override\r\n        protected void onPostExecute(String s) {\r\n            Toast.makeText(getBaseContext(),\"\"+z, Toast.LENGTH_LONG).show();\r\n            progressDialog.dismiss();\r\n        }\r\n    }\r\n\r\n    //creating pdf file\r\n    private void createPdf() throws FileNotFoundException, DocumentException {\r\n\r\n        File pdfFolder = new File(Environment.getExternalStoragePublicDirectory(\r\n                Environment.DIRECTORY_DOCUMENTS), \"pdfdemo\");\r\n        if (!pdfFolder.exists()) {\r\n            pdfFolder.mkdir();\r\n            Log.i(\"LOG_TAG\", \"Pdf Directory created\");\r\n        }\r\n\r\n        //Create time stamp\r\n        Date date = new Date() ;\r\n        String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(date);\r\n        myFile = new File(pdfFolder + timeStamp + \".pdf\");\r\n        OutputStream output = new FileOutputStream(myFile);\r\n        Document document = new Document(PageSize.LETTER);\r\n        ArrayList<String> getData=retrieveData();\r\n        PdfWriter.getInstance(document, output);\r\n\r\n        document.open();\r\n        document.add(new Paragraph(\"KERUX STATISTIC REPORT\"));\r\n        int counter=1;\r\n        boolean secondphase=false;\r\n        String line=\"\";\r\n        for (int i=0;i<getData.size();i++){\r\n            if(getData.get(i).equals(\"---------------------------------\")){\r\n                secondphase=true;\r\n                line=\"\";\r\n                counter=1;\r\n                document.add(new Paragraph(\"  \"));\r\n                continue;\r\n            }\r\n            if (!secondphase){\r\n\r\n                if(counter==3){\r\n                    document.add(new Paragraph(line));\r\n                    line=\"\";\r\n                    counter=1;\r\n                }\r\n                if(counter!=3){\r\n                    if (counter==2){\r\n                        line+=getData.get(i);\r\n                    }\r\n                    else{\r\n                        line+=getData.get(i)+\" | \";\r\n                    }\r\n                    counter++;\r\n                }\r\n\r\n            }else{\r\n                if(counter==4){\r\n                    document.add(new Paragraph(line));\r\n                    line=\"\";\r\n                    counter=1;\r\n                }\r\n                if(counter!=4){\r\n                    if (counter==3){\r\n                        line+=getData.get(i);\r\n                    }\r\n                    else{\r\n                        line+=getData.get(i)+\" | \";\r\n                    }\r\n                    counter++;\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        document.close();\r\n    }\r\n\r\n    private void viewPdf(){\r\n        Intent intent = new Intent(Intent.ACTION_VIEW);\r\n        Uri uri = FileProvider.getUriForFile(ViewStatReportsActivity.this,\r\n                BuildConfig.APPLICATION_ID + \".provider\",\r\n                myFile);\r\n        intent.setDataAndType(uri, \"application/pdf\");\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);\r\n        intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\r\n        startActivity(intent);\r\n    }\r\n\r\n    private void emailNote()\r\n    {\r\n        Intent email = new Intent(Intent.ACTION_SEND);\r\n        email.putExtra(Intent.EXTRA_SUBJECT,\"SUBJECT\");\r\n        email.putExtra(Intent.EXTRA_TEXT, \"TEXT\");\r\n        Uri uri = FileProvider.getUriForFile(ViewStatReportsActivity.this,\r\n                BuildConfig.APPLICATION_ID + \".provider\",\r\n                myFile);\r\n\r\n        Log.d(\"EMAIL\", String.valueOf(uri));\r\n\r\n        email.putExtra(Intent.EXTRA_STREAM, uri);\r\n        email.setType(\"message/rfc822\");\r\n        startActivity(email);\r\n    }\r\n\r\n    private ArrayList<String> retrieveData()\r\n    {\r\n        ArrayList<String> data=new ArrayList<>();\r\n        String error=\"\";\r\n        try {\r\n            Connection con = connectionClass.CONN();\r\n            Security sec =new Security();\r\n            if (con == null) {\r\n                error=\"Please check your internet connection\";\r\n                Log.d(\"WENT HEHEHE\", \"Help\");\r\n            } else {\r\n\r\n                //QUEUES SERVED\r\n                String queuesServed = QUEUES_SERVED;\r\n                PreparedStatement ps = con.prepareStatement(queuesServed);\r\n                ResultSet rs=ps.executeQuery();\r\n\r\n                while (rs.next())\r\n                {\r\n                    data.add(\"Queues Served: \");\r\n                    data.add(rs.getString(1));\r\n                    data.add(rs.getString(2));\r\n                    for(String num:data){\r\n                        Log.d(\"MEN\", num+\"YYYYY\");\r\n                    }\r\n                }\r\n\r\n                //QUEUES CANCELLED\r\n                String queuesCancelled = QUEUES_CANCELLED;\r\n                PreparedStatement ps2 = con.prepareStatement(queuesCancelled);\r\n                ResultSet rs2=ps2.executeQuery();\r\n\r\n                while (rs2.next())\r\n                {\r\n                    data.add(\"Queues Cancelled: \");\r\n                    data.add(rs2.getString(1));\r\n                    data.add(rs2.getString(2));\r\n                }\r\n\r\n                //HIGHEST DOCTOR QUEUES\r\n                String doctorQueues = HIGHEST_DOC_QUEUES;\r\n                PreparedStatement ps3 = con.prepareStatement(doctorQueues);\r\n                ResultSet rs3=ps3.executeQuery();\r\n\r\n                while (rs3.next())\r\n                {\r\n                    data.add(\"Highest Doctor Queues: \");\r\n                    data.add(rs3.getString(1));\r\n                    data.add(rs3.getString(2));\r\n                }\r\n\r\n                //HIGHEST DEPARTMENT QUEUES\r\n                String deptQueues = HIGHEST_DEPT_QUEUES;\r\n                PreparedStatement ps4 = con.prepareStatement(deptQueues);\r\n                ResultSet rs4=ps4.executeQuery();\r\n\r\n                while (rs4.next())\r\n                {\r\n                    data.add(\"Highest Department Queues: \");\r\n                    data.add(rs4.getString(1));\r\n                    data.add(rs4.getString(2));\r\n                }\r\n\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            ex.printStackTrace();\r\n        }\r\n        if(!error.equals(\"\")){\r\n            Toast.makeText(getBaseContext(),error, Toast.LENGTH_LONG).show();\r\n        }\r\n        Log.d(\"DATAAA\", data.get(1));\r\n        return data;\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/kerux/admin_thesis_kerux/reports/ViewStatReportsActivity.java	(revision d542ca0b5e01a9154d37d2ab860d1aac67e4262d)
+++ app/src/main/java/com/kerux/admin_thesis_kerux/reports/ViewStatReportsActivity.java	(date 1604905637456)
@@ -90,6 +90,7 @@
         docQueue = (TextView)findViewById(R.id.txtHighestDocQueue);
         deptQueue = (TextView)findViewById(R.id.txtHighestDeptQueue);
         txtdate = (TextView)findViewById(R.id.txtTimeStamp);
+        bttnGenerateStatReports=(Button)findViewById(R.id.bttnGenerateStat);
 
         txtdate.setText(timeStamp());
 
@@ -224,7 +225,7 @@
                     z = "Please check your internet connection";
                 } else {
                     createPdf();
-                    viewPdf();
+                    emailNote();
                     z="Report Generated";
                 }
             }
Index: app/src/main/java/com/kerux/admin_thesis_kerux/unenrollment/UnenrollQm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kerux.admin_thesis_kerux.unenrollment;\r\n\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.Button;\r\nimport android.widget.ListAdapter;\r\nimport android.widget.ListView;\r\nimport android.widget.SimpleAdapter;\r\nimport android.widget.Spinner;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\n\r\nimport com.kerux.admin_thesis_kerux.R;\r\nimport com.kerux.admin_thesis_kerux.dbutility.ConnectionClass;\r\nimport com.kerux.admin_thesis_kerux.dbutility.DBUtility;\r\nimport com.kerux.admin_thesis_kerux.navigation.EditProfile;\r\nimport com.kerux.admin_thesis_kerux.navigation.EnrollmentPage;\r\nimport com.kerux.admin_thesis_kerux.navigation.MainActivity;\r\nimport com.kerux.admin_thesis_kerux.navigation.ManageAccounts;\r\nimport com.kerux.admin_thesis_kerux.reports.ViewAuditReportsActivity;\r\nimport com.kerux.admin_thesis_kerux.reports.ViewStatReportsActivity;\r\nimport com.kerux.admin_thesis_kerux.security.Security;\r\nimport com.kerux.admin_thesis_kerux.session.KeruxSession;\r\nimport com.kerux.admin_thesis_kerux.spinner.Downloader;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.ResultSetMetaData;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class UnenrollQm extends AppCompatActivity implements DBUtility {\r\n\r\n    private ListView qmList;\r\n    private ListAdapter listAdapter;\r\n    Button qmDisplayList;\r\n    private Spinner spinnerQMReason;\r\n    ConnectionClass connectionClass;\r\n\r\n    DrawerLayout drawerLayout;\r\n\r\n    private static String urlReasonSpinner = \"http://192.168.1.13:89/kerux/reasonSpinnerQM.php\";\r\n    KeruxSession session;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate ( savedInstanceState );\r\n        setContentView ( R.layout.activity_unenroll_qm);\r\n        connectionClass = new ConnectionClass (); //create ConnectionClass\r\n        session=new KeruxSession(getApplicationContext());\r\n\r\n        drawerLayout = findViewById(R.id.drawer_layout);\r\n        spinnerQMReason = (Spinner) findViewById(R.id.spinnerQMReason);\r\n\r\n        qmDisplayList = (Button) findViewById(R.id.bttnDisplayQm);\r\n        qmList = (ListView) findViewById(R.id.listEnrolledQm);\r\n\r\n        qmDisplayList.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                UnenrollQm.ListQM qmListdisp = new UnenrollQm.ListQM();\r\n                qmListdisp.execute();\r\n            }\r\n        });\r\n\r\n        qmList.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n\r\n                final String selectedFromList = getQMString(String.valueOf((qmList.getItemAtPosition(position))));\r\n                Toast.makeText(getApplicationContext(), \"You selected: \" + selectedFromList, Toast.LENGTH_LONG).show();\r\n                //Dialog box, for unenrolling\r\n                AlertDialog.Builder builder = new AlertDialog.Builder(UnenrollQm.this);\r\n                builder.setMessage(\"Are you sure you want to revoke the privilege of this queue manager\" +\r\n                        \"?\")\r\n                        .setCancelable(false)\r\n                        .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\r\n                            public void onClick(DialogInterface dialog, int id) {\r\n                                String reason = ((Spinner) findViewById(R.id.spinnerQMReason)).getSelectedItem().toString();\r\n                                Toast.makeText(getApplicationContext(), selectedFromList, Toast.LENGTH_LONG).show();\r\n                                Toast.makeText(getApplicationContext(), \"Successfully revoked privilege\", Toast.LENGTH_LONG).show();\r\n                                unenrollQM(selectedFromList, reason);\r\n                                UnenrollQm.ListQM qmListdisp = new UnenrollQm.ListQM();\r\n                                qmListdisp.execute();\r\n                                insertAudit();\r\n                            }\r\n                        })\r\n                        .setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\r\n                            public void onClick(DialogInterface dialog, int id) {\r\n                                dialog.cancel();\r\n                            }\r\n                        });\r\n                AlertDialog alert = builder.create();\r\n                alert.show();\r\n            }\r\n        });\r\n\r\n        Button bttnDept = findViewById(R.id.bttnUnenrollDept);\r\n        bttnDept.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if(checkQMList()) {\r\n                    Intent intent5 = new Intent(UnenrollQm.this, UnenrollDept.class);\r\n                    startActivity(intent5);\r\n                }else{\r\n                    Toast.makeText(getApplicationContext(), \"Cannot go to Unenrollment of Department, Must UNENROLL all Queue Managers to proceed.\", Toast.LENGTH_LONG).show();\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n        Downloader qm = new Downloader(UnenrollQm.this, urlReasonSpinner, spinnerQMReason, \"Reason\", \"Choose Reason to Revoke\");\r\n        qm.execute();\r\n    }\r\n\r\n    public void ClickMenu (View view){\r\n        //open drawer\r\n        MainActivity.openDrawer(drawerLayout);\r\n    }\r\n\r\n    public void ClickLogo (View view){\r\n        //Close drawer\r\n        MainActivity.closeDrawer(drawerLayout);\r\n    }\r\n\r\n    public void ClickDashboard(View view){\r\n        //Redirect activity to dashboard\r\n        MainActivity.redirectActivity(this, MainActivity.class);\r\n    }\r\n\r\n    public void ClickEditProfile(View view){\r\n        //Redirect activity to dashboard\r\n        MainActivity.redirectActivity(this, EditProfile.class);\r\n    }\r\n\r\n    public void ClickManageAccounts(View view){\r\n        //Redirect activity to manage accounts\r\n        MainActivity.redirectActivity(this, ManageAccounts.class);\r\n    }\r\n\r\n    public void ClickEnrollment(View view){\r\n        //Recreate activity\r\n        MainActivity.redirectActivity(this, EnrollmentPage.class);\r\n    }\r\n\r\n    public void ClickRevoke(View view){\r\n        //redirect activity to revoke page\r\n        MainActivity.redirectActivity(this, UnenrollDoc.class);\r\n    }\r\n\r\n    public void ClickViewStat(View view){\r\n        MainActivity.redirectActivity(this, ViewStatReportsActivity.class);\r\n    }\r\n\r\n    public void ClickViewAudit(View view){\r\n        MainActivity.redirectActivity(this, ViewAuditReportsActivity.class);\r\n    }\r\n\r\n\r\n    public void ClickLogout(View view){\r\n        MainActivity.logout(this);\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        //close drawer\r\n        MainActivity.closeDrawer(drawerLayout);\r\n    }\r\n\r\n    public void insertAudit(){\r\n        Connection con = connectionClass.CONN();\r\n        PreparedStatement ps = null;\r\n        Security sec = new Security();\r\n\r\n        String statusActive = \"Active\";\r\n        String statusInactive = \"Inactive\";\r\n        String reason = ((Spinner)findViewById(R.id.spinnerQMReason)).getSelectedItem().toString();\r\n\r\n        try {\r\n            String queryAUDIT = INSERT_AUDIT_LOG;\r\n            PreparedStatement psAUDIT = con.prepareStatement(queryAUDIT);\r\n            psAUDIT.setString(1, sec.encrypt(\"queue manager\"));\r\n            psAUDIT.setString(2, sec.encrypt(\"unenroll queue manager\"));\r\n            psAUDIT.setString(3, sec.encrypt(\"Unenrolling a queue manager record\"));\r\n            psAUDIT.setString(4, sec.encrypt(\"Status = \" + statusActive));\r\n            psAUDIT.setString(5, sec.encrypt(\"Status = \" + statusInactive + \", \" + \"Reason = \" + reason));\r\n            psAUDIT.setString(6, session.getusername());\r\n            psAUDIT.executeUpdate();\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public void unenrollQM(String firstName, String reason){\r\n\r\n        Connection con = connectionClass.CONN();\r\n        PreparedStatement ps = null;\r\n\r\n        String query = UNENROLL_QM_REASON;\r\n        PreparedStatement ps1 = null;\r\n\r\n        try {\r\n            ps = con.prepareStatement(UNENROLL_QM);\r\n            ps.setString(1, firstName);\r\n\r\n            ps1 = con.prepareStatement(query);\r\n            ps1.setString(1, reason);\r\n            ps1.setString(2, firstName);\r\n\r\n            ps.executeUpdate();\r\n            ps1.executeUpdate();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    //deleting a record in the database\r\n\r\n    public boolean checkQMList(){\r\n        boolean allInactiveRec = false;\r\n        Connection con = connectionClass.CONN();\r\n        String qmStatus = \"Active\";\r\n\r\n        if(con != null){ //means that we have a valid db connection\r\n            try{//inserting records; called INSERT_REC from DBUtility.java\r\n                // use of parameterized query such as PreparedStatement prevents SQL injection which is considered a way to\r\n                //prevent threat in any web app\r\n                String query = SELECT_UNENROLLED_QM;\r\n                PreparedStatement ps = con.prepareStatement(query);\r\n                ps.setString(1, qmStatus);\r\n\r\n                ResultSet rs=ps.executeQuery();\r\n                if(rs.next()){\r\n                    Log.d(\"WENT HERE\", \"DIDNT GO IN\");\r\n                }\r\n                else{\r\n                    Log.d(\"WENT HERE\", \"WENT IN\");\r\n                    allInactiveRec=true;\r\n\r\n                }\r\n            } catch(SQLException sqle){\r\n                System.err.println(sqle.getMessage());\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        return allInactiveRec;\r\n    }\r\n\r\n    //go back to the previous page\r\n    public void goBack() {\r\n        Intent intent = new Intent(this, UnenrollDoc.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n    public String getQMString(String rowFromListView){\r\n        String name = rowFromListView.substring(1, rowFromListView.length()-1);\r\n\r\n        String qmString1=name.replaceAll(\".*second=\", \"\");\r\n\r\n\r\n        return qmString1;\r\n    }\r\n\r\n    //Displaying the list of enrolled queue manager in the database\r\n    private class ListQM extends AsyncTask<String, String, String> {\r\n        Connection con = connectionClass.CONN();\r\n        boolean isSuccess = false;\r\n        String message = \"\";\r\n\r\n        @Override\r\n        protected void onPreExecute() {\r\n            Toast.makeText(getBaseContext(),\"Please wait..\",Toast.LENGTH_LONG).show();\r\n            super.onPreExecute();\r\n        }\r\n        @Override\r\n        protected String doInBackground(String... strings) {\r\n            try {\r\n                //listview, list the names of all enrolled department\r\n                qmList = (ListView) findViewById(R.id.listEnrolledQm);\r\n                String result = \"Database Connection Successful\\n\";\r\n                Statement st = con.createStatement();\r\n                ResultSet rset = st.executeQuery(SELECT_LIST_QM);\r\n                ResultSetMetaData rsmd = rset.getMetaData();\r\n\r\n                List<Map<String, String>> data = null;\r\n                data = new ArrayList<Map<String, String>> ();\r\n\r\n                while (rset.next()) {\r\n                    HashMap<String, String> datanum = new HashMap<String, String>();\r\n                    datanum.put(\"first\", rset.getString(1).toString());\r\n                    datanum.put(\"second\", rset.getString(2).toString());\r\n                    datanum.put(\"third\", rset.getString(3).toString());\r\n\r\n                    /*datanum.put(\"A\", \"CLINIC NAME\" + \"\\n\"+rset.getString(1).toString() + \"\\n \\n\" + \"DEPARTMENT NAME\" +\r\n                            \"\\n\" + rset.getString(2).toString() +\"\\n \\n\"\r\n                    + \"STATUS\" +\"\\n\" + rset.getString(3).toString());*/\r\n\r\n                    data.add(datanum);\r\n                }\r\n\r\n                listAdapter = new SimpleAdapter (UnenrollQm.this, data,\r\n                        R.layout.listview_row, new String[] {\"first\", \"second\", \"third\"}, new int[] {R.id.FIRST_COL, R.id.SECOND_COL, R.id.THIRD_COL});\r\n\r\n                while (rset.next()) {\r\n                    result += rset.getString(2) + \"\\n\";\r\n                }\r\n                message = \"DELETED\";\r\n            } catch (Exception ex) {\r\n                isSuccess = false;\r\n                message = \"Exceptions\" + ex;\r\n            }\r\n            return message;\r\n        }\r\n        @Override\r\n        protected void onPostExecute(String s) {\r\n            qmList.setAdapter(listAdapter);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/kerux/admin_thesis_kerux/unenrollment/UnenrollQm.java	(revision d542ca0b5e01a9154d37d2ab860d1aac67e4262d)
+++ app/src/main/java/com/kerux/admin_thesis_kerux/unenrollment/UnenrollQm.java	(date 1604905637474)
@@ -79,7 +79,7 @@
         qmList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-
+                Log.d("QMM",String.valueOf((qmList.getItemAtPosition(position))));
                 final String selectedFromList = getQMString(String.valueOf((qmList.getItemAtPosition(position))));
                 Toast.makeText(getApplicationContext(), "You selected: " + selectedFromList, Toast.LENGTH_LONG).show();
                 //Dialog box, for unenrolling
Index: app/src/main/java/com/kerux/admin_thesis_kerux/login/Login.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kerux.admin_thesis_kerux.login;\r\n\r\nimport android.app.ProgressDialog;\r\nimport android.content.Intent;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.kerux.admin_thesis_kerux.R;\r\nimport com.kerux.admin_thesis_kerux.dbutility.ConnectionClass;\r\nimport com.kerux.admin_thesis_kerux.dbutility.DBUtility;\r\nimport com.kerux.admin_thesis_kerux.navigation.MainActivity;\r\nimport com.kerux.admin_thesis_kerux.security.Security;\r\nimport com.kerux.admin_thesis_kerux.security.SecurityWEB;\r\nimport com.kerux.admin_thesis_kerux.session.KeruxSession;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\npublic class Login extends AppCompatActivity implements DBUtility {\r\n    private static EditText username;\r\n    private static EditText password;\r\n    private static TextView attempt;\r\n    private static Button button_login;\r\n    private static Button bttnDashboard;\r\n    int attempt_counter = 5;\r\n\r\n    private KeruxSession session;\r\n    private SecurityWEB secweb;\r\n    private Security sec;\r\n\r\n    ProgressDialog progressDialog; //\r\n    ConnectionClass connectionClass;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n        connectionClass = new ConnectionClass();\r\n\r\n        progressDialog=new ProgressDialog(this);//\r\n\r\n        username = (EditText)findViewById(R.id.txtboxUname);\r\n        password = (EditText)findViewById(R.id.txtboxPass);\r\n        button_login = (Button)findViewById(R.id.bttnLogin);\r\n        secweb=new SecurityWEB();\r\n        session = new KeruxSession(getApplicationContext());\r\n        /*bttnDashboard = findViewById(R.id.bttnDashboard);*/\r\n\r\n       /* bttnDashboard.setOnClickListener(new View.OnClickListener() {//\r\n            @Override\r\n            public void onClick(View v) {\r\n                GoToDashboard();\r\n            }\r\n        });*/\r\n\r\n        button_login.setOnClickListener(new View.OnClickListener() {//\r\n            @Override\r\n            public void onClick(View v) {\r\n                Dologin dologin=new Dologin();\r\n                dologin.execute();\r\n                insertAudit();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public void GoToDashboard(){\r\n        Intent intent = new Intent(this, MainActivity.class);\r\n        startActivity(intent);\r\n    }\r\n    public void insertAudit(){\r\n        Connection con = connectionClass.CONN();\r\n        PreparedStatement ps = null;\r\n        sec = new Security();\r\n\r\n        try {\r\n            String queryAUDIT = INSERT_AUDIT_LOG;\r\n            PreparedStatement psAUDIT = con.prepareStatement(queryAUDIT);\r\n            psAUDIT.setString(1, sec.encrypt(\"login\"));\r\n            psAUDIT.setString(2, sec.encrypt(\"login\"));\r\n            psAUDIT.setString(3, sec.encrypt(\"Logging in to the app\"));\r\n            psAUDIT.setString(4, sec.encrypt(\"none\"));\r\n            psAUDIT.setString(5, sec.encrypt(\"login\"));\r\n            psAUDIT.setString(6, session.getusername());\r\n            psAUDIT.executeUpdate();\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private class Dologin extends AsyncTask<String,String,String> {\r\n\r\n        String uname=username.getText().toString();\r\n        String pw=password.getText().toString();\r\n        int adminId;\r\n        int clinicid;\r\n        String z=\"\";\r\n\r\n        boolean isSuccess=false;\r\n\r\n        String firstName,lastName,email, usernam;\r\n\r\n        @Override\r\n        protected void onPreExecute() {\r\n            progressDialog.setMessage(\"Loading...\");\r\n            progressDialog.show();\r\n\r\n            super.onPreExecute();\r\n        }\r\n\r\n        @Override\r\n        protected String doInBackground(String... params) {\r\n            if(uname.trim().equals(\"\")||pw.trim().equals(\"\"))\r\n                z = \"Please enter all fields....\";\r\n            else\r\n            {\r\n                try {\r\n                    Connection con = connectionClass.CONN();\r\n                    if (con == null) {\r\n                        z = \"Please check your internet connection\";\r\n                    } else {\r\n\r\n                        String query= SELECT_ADMIN_LOGIN;\r\n\r\n                        PreparedStatement ps = con.prepareStatement(query);\r\n                        ps.setString(1, secweb.encrypt(uname));\r\n                        ps.setString(2, secweb.encrypt(pw));\r\n\r\n                        ResultSet rs=ps.executeQuery();\r\n                        /*z=secweb.encrypt(uname) + \" \" + secweb.encrypt(pw);*/\r\n                        z = \"Incorrect username or password\";\r\n                        while (rs.next()) {\r\n                            adminId=rs.getInt(1);\r\n                            firstName = rs.getString(2);\r\n                            lastName = rs.getString(3);\r\n                            email=rs.getString(4);\r\n                            clinicid=rs.getInt(5);\r\n                            usernam=rs.getString(6);\r\n\r\n                            //SET SESSION\r\n                            session.setadminid(String.valueOf(adminId));\r\n                            session.setfirstname(firstName);\r\n                            session.setlastname(lastName);\r\n                            session.setemail(email);\r\n                            session.setclinicid(String.valueOf(clinicid));\r\n                            session.setusername(usernam);\r\n                            isSuccess = true;\r\n                            z = \"Logged in successfully!\";\r\n                        }\r\n                    }\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    isSuccess = false;\r\n                    z = \"Exceptions\"+ex;\r\n                }\r\n/*                catch (Exception e) {\r\n                    Thread.dumpStack(); //always put this from sir mon\r\n                }*/\r\n            }\r\n            return z;\r\n        }\r\n\r\n        @Override\r\n        protected void onPostExecute(String s) {\r\n            Toast.makeText(getBaseContext(),\"\"+z,Toast.LENGTH_LONG).show();\r\n\r\n            if(isSuccess) {\r\n                Intent intent=new Intent(Login.this, MainActivity.class);\r\n                intent.putExtra(\"adminname\", firstName+\" \"+lastName);\r\n                startActivity(intent);\r\n            }\r\n            progressDialog.hide();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/kerux/admin_thesis_kerux/login/Login.java	(revision d542ca0b5e01a9154d37d2ab860d1aac67e4262d)
+++ app/src/main/java/com/kerux/admin_thesis_kerux/login/Login.java	(date 1604905637466)
@@ -4,6 +4,7 @@
 import android.content.Intent;
 import android.os.AsyncTask;
 import android.os.Bundle;
+import android.util.Log;
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
@@ -32,7 +33,6 @@
     private static Button button_login;
     private static Button bttnDashboard;
     int attempt_counter = 5;
-
     private KeruxSession session;
     private SecurityWEB secweb;
     private Security sec;
